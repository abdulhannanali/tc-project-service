{
	"info": {
		"_postman_id": "ad8b6dac-5cb8-4150-9e36-667412cd80a7",
		"name": "project-api",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
	},
	"item": [
		{
			"name": "Project Type",
			"item": [
				{
					"name": "create project type",
					"item": [
						{
							"name": "create project type by admin",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const iterationData = pm.iterationData",
											"const httpCode = iterationData.get('httpCode')",
											"pm.test(`Status code is ${httpCode}`, function () {",
											"    pm.response.to.have.status(httpCode);",
											"    const response = pm.response.json()",
											"    const iterationData = pm.iterationData",
											"    const expected = iterationData.get('expected')",
											"    for (let key of Object.keys(expected)) {",
											"        console.log('updated')",
											"        pm.expect(_.isEqual(response[key], expected[key])).to.eq(true)",
											"    }",
											"    if (iterationData.get('idLabel')) {",
											"        const idLabel = iterationData.get('idLabel')",
											"        pm.environment.set(idLabel, response.key)",
											"    }",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"var inputJSONdata = pm.iterationData.get(\"input\");",
											"pm.variables.set(\"input_body\",JSON.stringify(inputJSONdata));"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{admin_token}}"
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{{input_body}}"
								},
								"url": {
									"raw": "{{URL}}/projects/metadata/projectTypes",
									"host": [
										"{{URL}}"
									],
									"path": [
										"projects",
										"metadata",
										"projectTypes"
									]
								}
							},
							"response": []
						},
						{
							"name": "create project type by m2m",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const iterationData = pm.iterationData",
											"const httpCode = iterationData.get('httpCode')",
											"pm.test(`Status code is ${httpCode}`, function () {",
											"    pm.response.to.have.status(httpCode);",
											"    const response = pm.response.json()",
											"    const iterationData = pm.iterationData",
											"    const expected = iterationData.get('expected')",
											"    for (let key of Object.keys(expected)) {",
											"        pm.expect(_.isEqual(response[key], expected[key])).to.eq(true)",
											"    }",
											"    if (iterationData.get('idLabel')) {",
											"        const idLabel = iterationData.get('idLabel')",
											"        pm.environment.set(idLabel, response.key)",
											"    }",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"var inputJSONdata = pm.iterationData.get(\"input\");",
											"pm.variables.set(\"input_body\",JSON.stringify(inputJSONdata));"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{m2m_token}}"
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{{input_body}}"
								},
								"url": {
									"raw": "{{URL}}/projects/metadata/projectTypes",
									"host": [
										"{{URL}}"
									],
									"path": [
										"projects",
										"metadata",
										"projectTypes"
									]
								}
							},
							"response": []
						},
						{
							"name": "create project type with all kinds of invalid request body",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const iterationData = pm.iterationData",
											"const httpCode = iterationData.get('httpCode')",
											"pm.test(`Status code is ${httpCode}`, function () {",
											"    pm.response.to.have.status(httpCode);",
											"    const response = pm.response.json()",
											"    pm.expect(response.message).to.eq(iterationData.get('message'))",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"var inputJSONdata = pm.iterationData.get(\"input\");",
											"pm.variables.set(\"input_body\",JSON.stringify(inputJSONdata));"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{admin_token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{{input_body}}"
								},
								"url": {
									"raw": "{{URL}}/projects/metadata/projectTypes",
									"host": [
										"{{URL}}"
									],
									"path": [
										"projects",
										"metadata",
										"projectTypes"
									]
								}
							},
							"response": []
						},
						{
							"name": "create project type with all kinds of invalid token",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const iterationData = pm.iterationData",
											"const httpCode = iterationData.get('httpCode')",
											"pm.test(`Status code is ${httpCode}`, function () {",
											"    pm.response.to.have.status(httpCode);",
											"    const response = pm.response.json()",
											"    if (response.message) {",
											"        pm.expect(response.message).to.eq(iterationData.get('message'))",
											"    } else {",
											"        pm.expect(response.result.content.message).to.eq(iterationData.get('message'))",
											"    }",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "{{jwtToken}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"key\": \"POSTMANE2E-key-valid\",\n    \"displayName\": \"new displayName 1\",\n    \"icon\": \"http://example.com/icon1.ico\",\n    \"question\": \"question 1\",\n    \"info\": \"info 1\",\n    \"aliases\": [\"key-1\", \"key_2\"],\n    \"metadata\": {}\n}"
								},
								"url": {
									"raw": "{{URL}}/projects/metadata/projectTypes",
									"host": [
										"{{URL}}"
									],
									"path": [
										"projects",
										"metadata",
										"projectTypes"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "list project types",
					"item": [
						{
							"name": "list project types by admin",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(`Status code is 200`, function () {",
											"    pm.response.to.have.status(200);",
											"    const response = pm.response.json()",
											"    pm.expect(response.length).to.gt(0)",
											"    const iterationData = pm.iterationData",
											"    const expectedFields = iterationData.get('expectedFields')",
											"    for (let item of response) {",
											"        // make sure the list returns the expected fields",
											"        pm.expect(expectedFields.every(r=> Object.keys(item).indexOf(r) >= 0)).to.eq(true)",
											"    }",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"value": "Bearer {{admin_token}}",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{URL}}/projects/metadata/projectTypes",
									"host": [
										"{{URL}}"
									],
									"path": [
										"projects",
										"metadata",
										"projectTypes"
									]
								}
							},
							"response": []
						},
						{
							"name": "list project types by m2m",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(`Status code is 200`, function () {",
											"    pm.response.to.have.status(200);",
											"    const response = pm.response.json()",
											"    pm.expect(response.length).to.gt(0)",
											"    const iterationData = pm.iterationData",
											"    const expectedFields = iterationData.get('expectedFields')",
											"    for (let item of response) {",
											"        // make sure the list returns the expected fields",
											"        pm.expect(expectedFields.every(r=> Object.keys(item).indexOf(r) >= 0)).to.eq(true)",
											"    }",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{m2m_token}}"
									}
								],
								"url": {
									"raw": "{{URL}}/projects/metadata/projectTypes",
									"host": [
										"{{URL}}"
									],
									"path": [
										"projects",
										"metadata",
										"projectTypes"
									]
								}
							},
							"response": []
						},
						{
							"name": "list project types by copilot",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(`Status code is 200`, function () {",
											"    pm.response.to.have.status(200);",
											"    const response = pm.response.json()",
											"    pm.expect(response.length).to.gt(0)",
											"    const iterationData = pm.iterationData",
											"    const expectedFields = iterationData.get('expectedFields')",
											"    for (let item of response) {",
											"        // make sure the list returns the expected fields",
											"        pm.expect(expectedFields.every(r=> Object.keys(item).indexOf(r) >= 0)).to.eq(true)",
											"    }",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{copilot_token}}"
									}
								],
								"url": {
									"raw": "{{URL}}/projects/metadata/projectTypes",
									"host": [
										"{{URL}}"
									],
									"path": [
										"projects",
										"metadata",
										"projectTypes"
									]
								}
							},
							"response": []
						},
						{
							"name": "list project types by user",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(`Status code is 200`, function () {",
											"    pm.response.to.have.status(200);",
											"    const response = pm.response.json()",
											"    pm.expect(response.length).to.gt(0)",
											"    const iterationData = pm.iterationData",
											"    const expectedFields = iterationData.get('expectedFields')",
											"    for (let item of response) {",
											"        // make sure the list returns the expected fields",
											"        pm.expect(expectedFields.every(r=> Object.keys(item).indexOf(r) >= 0)).to.eq(true)",
											"    }",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{user_token}}"
									}
								],
								"url": {
									"raw": "{{URL}}/projects/metadata/projectTypes",
									"host": [
										"{{URL}}"
									],
									"path": [
										"projects",
										"metadata",
										"projectTypes"
									]
								}
							},
							"response": []
						},
						{
							"name": "list project types with all kinds of invalid token",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const iterationData = pm.iterationData",
											"const httpCode = iterationData.get('httpCode')",
											"pm.test(`Status code is ${httpCode}`, function () {",
											"    pm.response.to.have.status(httpCode);",
											"    const response = pm.response.json()",
											"    if (response.message) {",
											"        pm.expect(response.message).to.eq(iterationData.get('message'))",
											"    } else {",
											"        pm.expect(response.result.content.message).to.eq(iterationData.get('message'))",
											"    }",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "{{jwtToken}}"
									}
								],
								"url": {
									"raw": "{{URL}}/projects/metadata/projectTypes",
									"host": [
										"{{URL}}"
									],
									"path": [
										"projects",
										"metadata",
										"projectTypes"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "get project type",
					"item": [
						{
							"name": "get project type by admin",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const iterationData = pm.iterationData",
											"const httpCode = iterationData.get('httpCode')",
											"pm.test(`Status code is ${httpCode}`, function () {",
											"    pm.response.to.have.status(httpCode);",
											"    if(httpCode === 200){",
											"        const response = pm.response.json()",
											"        const iterationData = pm.iterationData",
											"        const expected = iterationData.get('expected')",
											"        for (let key of Object.keys(expected)) {",
											"            pm.expect(_.isEqual(response[key], expected[key])).to.eq(true)",
											"        }",
											"    }",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{admin_token}}"
									}
								],
								"url": {
									"raw": "{{URL}}/projects/metadata/projectTypes/{{id}}",
									"host": [
										"{{URL}}"
									],
									"path": [
										"projects",
										"metadata",
										"projectTypes",
										"{{id}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "get project type by m2m",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const iterationData = pm.iterationData",
											"const httpCode = iterationData.get('httpCode')",
											"pm.test(`Status code is ${httpCode}`, function () {",
											"    pm.response.to.have.status(httpCode);",
											"    if(httpCode === 200){",
											"        const response = pm.response.json()",
											"        const iterationData = pm.iterationData",
											"        const expected = iterationData.get('expected')",
											"        for (let key of Object.keys(expected)) {",
											"            pm.expect(_.isEqual(response[key], expected[key])).to.eq(true)",
											"        }",
											"    }",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{admin_token}}"
									}
								],
								"url": {
									"raw": "{{URL}}/projects/metadata/projectTypes/{{id}}",
									"host": [
										"{{URL}}"
									],
									"path": [
										"projects",
										"metadata",
										"projectTypes",
										"{{id}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "get project type by copilot",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const iterationData = pm.iterationData",
											"const httpCode = iterationData.get('httpCode')",
											"pm.test(`Status code is ${httpCode}`, function () {",
											"    pm.response.to.have.status(httpCode);",
											"    if(httpCode === 200){",
											"        const response = pm.response.json()",
											"        const iterationData = pm.iterationData",
											"        const expected = iterationData.get('expected')",
											"        for (let key of Object.keys(expected)) {",
											"            pm.expect(_.isEqual(response[key], expected[key])).to.eq(true)",
											"        }",
											"    }",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{copilot_token}}"
									}
								],
								"url": {
									"raw": "{{URL}}/projects/metadata/projectTypes/{{id}}",
									"host": [
										"{{URL}}"
									],
									"path": [
										"projects",
										"metadata",
										"projectTypes",
										"{{id}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "get project type by user",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const iterationData = pm.iterationData",
											"const httpCode = iterationData.get('httpCode')",
											"pm.test(`Status code is ${httpCode}`, function () {",
											"    pm.response.to.have.status(httpCode);",
											"    if(httpCode === 200){",
											"        const response = pm.response.json()",
											"        const iterationData = pm.iterationData",
											"        const expected = iterationData.get('expected')",
											"        for (let key of Object.keys(expected)) {",
											"            pm.expect(_.isEqual(response[key], expected[key])).to.eq(true)",
											"        }",
											"    }",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{user_token}}"
									}
								],
								"url": {
									"raw": "{{URL}}/projects/metadata/projectTypes/{{id}}",
									"host": [
										"{{URL}}"
									],
									"path": [
										"projects",
										"metadata",
										"projectTypes",
										"{{id}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "get project type with invalid requests",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const iterationData = pm.iterationData",
											"const httpCode = iterationData.get('httpCode')",
											"pm.test(`Status code is ${httpCode}`, function () {",
											"    pm.response.to.have.status(httpCode);",
											"    const response = pm.response.json()",
											"    pm.expect(response.message).to.eq(iterationData.get('message'))",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{admin_token}}"
									}
								],
								"url": {
									"raw": "{{URL}}/projects/metadata/projectTypes/{{id}}",
									"host": [
										"{{URL}}"
									],
									"path": [
										"projects",
										"metadata",
										"projectTypes",
										"{{id}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "get project type with all kinds of invalid token",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const iterationData = pm.iterationData",
											"const httpCode = iterationData.get('httpCode')",
											"pm.test(`Status code is ${httpCode}`, function () {",
											"    pm.response.to.have.status(httpCode);",
											"    const response = pm.response.json()",
											"    if (response.message) {",
											"        pm.expect(response.message).to.eq(iterationData.get('message'))",
											"    } else {",
											"        pm.expect(response.result.content.message).to.eq(iterationData.get('message'))",
											"    }",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "{{jwtToken}}"
									}
								],
								"url": {
									"raw": "{{URL}}/projects/metadata/projectTypes/{{id}}",
									"host": [
										"{{URL}}"
									],
									"path": [
										"projects",
										"metadata",
										"projectTypes",
										"{{id}}"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "patch project type",
					"item": [
						{
							"name": "patch project type by admin",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const iterationData = pm.iterationData",
											"const httpCode = iterationData.get('httpCode')",
											"pm.test(`Status code is ${httpCode}`, function () {",
											"    pm.response.to.have.status(httpCode);",
											"    const response = pm.response.json()",
											"    const iterationData = pm.iterationData",
											"    const expected = iterationData.get('expected')",
											"    for (let key of Object.keys(expected)) {",
											"        pm.expect(_.isEqual(response[key], expected[key])).to.eq(true)",
											"    }",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"var inputJSONdata = pm.iterationData.get(\"input\");",
											"pm.variables.set(\"input_body\",JSON.stringify(inputJSONdata));"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PATCH",
								"header": [
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{admin_token}}"
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{{input_body}}"
								},
								"url": {
									"raw": "{{URL}}/projects/metadata/projectTypes/{{id}}",
									"host": [
										"{{URL}}"
									],
									"path": [
										"projects",
										"metadata",
										"projectTypes",
										"{{id}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "patch project type by m2m",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const iterationData = pm.iterationData",
											"const httpCode = iterationData.get('httpCode')",
											"pm.test(`Status code is ${httpCode}`, function () {",
											"    pm.response.to.have.status(httpCode);",
											"    const response = pm.response.json()",
											"    const iterationData = pm.iterationData",
											"    const expected = iterationData.get('expected')",
											"    for (let key of Object.keys(expected)) {",
											"        pm.expect(_.isEqual(response[key], expected[key])).to.eq(true)",
											"    }",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"var inputJSONdata = pm.iterationData.get(\"input\");",
											"pm.variables.set(\"input_body\",JSON.stringify(inputJSONdata));"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PATCH",
								"header": [
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{m2m_token}}"
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{{input_body}}"
								},
								"url": {
									"raw": "{{URL}}/projects/metadata/projectTypes/{{id}}",
									"host": [
										"{{URL}}"
									],
									"path": [
										"projects",
										"metadata",
										"projectTypes",
										"{{id}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "patch project type with all kinds of invalid request body",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const iterationData = pm.iterationData",
											"const httpCode = iterationData.get('httpCode')",
											"pm.test(`Status code is ${httpCode}`, function () {",
											"    pm.response.to.have.status(httpCode);",
											"    const response = pm.response.json()",
											"    pm.expect(response.message).to.eq(iterationData.get('message'))",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"var inputJSONdata = pm.iterationData.get(\"input\");",
											"pm.variables.set(\"input_body\",JSON.stringify(inputJSONdata));"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PATCH",
								"header": [
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{admin_token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{{input_body}}"
								},
								"url": {
									"raw": "{{URL}}/projects/metadata/projectTypes/{{id}}",
									"host": [
										"{{URL}}"
									],
									"path": [
										"projects",
										"metadata",
										"projectTypes",
										"{{id}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "patch project type with all kinds of invalid token",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const iterationData = pm.iterationData",
											"const httpCode = iterationData.get('httpCode')",
											"pm.test(`Status code is ${httpCode}`, function () {",
											"    pm.response.to.have.status(httpCode);",
											"    const response = pm.response.json()",
											"    if (response.message) {",
											"        pm.expect(response.message).to.eq(iterationData.get('message'))",
											"    } else {",
											"        pm.expect(response.result.content.message).to.eq(iterationData.get('message'))",
											"    }",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PATCH",
								"header": [
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "{{jwtToken}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"key\": \"POSTMANE2E-key-valid\",\n    \"displayName\": \"new displayName 1\",\n    \"icon\": \"http://example.com/icon1.ico\",\n    \"question\": \"question 1\",\n    \"info\": \"info 1\",\n    \"aliases\": [\"key-1\", \"key_2\"],\n    \"metadata\": {}\n}"
								},
								"url": {
									"raw": "{{URL}}/projects/metadata/projectTypes/{{id}}",
									"host": [
										"{{URL}}"
									],
									"path": [
										"projects",
										"metadata",
										"projectTypes",
										"{{id}}"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "delete project type",
					"item": [
						{
							"name": "delete project type by admin",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(`Status code is 204`, function () {",
											"    pm.response.to.have.status(204)",
											"    const response = pm.response.text()",
											"    pm.expect(response).to.eq('')",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{admin_token}}"
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"url": {
									"raw": "{{URL}}/projects/metadata/projectTypes/{{PROJECT_TYPE_5}}",
									"host": [
										"{{URL}}"
									],
									"path": [
										"projects",
										"metadata",
										"projectTypes",
										"{{PROJECT_TYPE_5}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "delete project type by m2m",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(`Status code is 204`, function () {",
											"    pm.response.to.have.status(204)",
											"    const response = pm.response.text()",
											"    pm.expect(response).to.eq('')",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{m2m_token}}"
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"url": {
									"raw": "{{URL}}/projects/metadata/projectTypes/{{PROJECT_TYPE_6}}",
									"host": [
										"{{URL}}"
									],
									"path": [
										"projects",
										"metadata",
										"projectTypes",
										"{{PROJECT_TYPE_6}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "delete project type with all kinds of invalid request",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const iterationData = pm.iterationData",
											"const httpCode = iterationData.get('httpCode')",
											"pm.test(`Status code is ${httpCode}`, function () {",
											"    pm.response.to.have.status(httpCode);",
											"    const response = pm.response.json()",
											"    if (response.message) {",
											"        pm.expect(response.message).to.contains(iterationData.get('message'))",
											"    } else {",
											"        pm.expect(response.result.content.message).to.eq(iterationData.get('message'))",
											"    }",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "{{jwtToken}}"
									}
								],
								"url": {
									"raw": "{{URL}}/projects/metadata/projectTypes/{{id}}",
									"host": [
										"{{URL}}"
									],
									"path": [
										"projects",
										"metadata",
										"projectTypes",
										"{{id}}"
									]
								}
							},
							"response": []
						}
					]
				}
			]
		},
		{
			"name": "Project",
			"item": [
				{
					"name": "create project",
					"item": [
						{
							"name": "create project by admin",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const iterationData = pm.iterationData",
											"const httpCode = iterationData.get('httpCode')",
											"pm.test(`Status code is ${httpCode}`, function () {",
											"    pm.response.to.have.status(httpCode);",
											"    const response = pm.response.json()",
											"    const iterationData = pm.iterationData",
											"    const expected = iterationData.get('expected')",
											"    for (let key of Object.keys(expected)) {",
											"        // check every fields to match expected",
											"        pm.expect(_.isEqual(response[key], expected[key])).to.eq(true)",
											"    }",
											"    if (iterationData.get('idLabel')) {",
											"        const idLabel = iterationData.get('idLabel')",
											"        pm.environment.set(idLabel, response.id)",
											"    }",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"var inputJSONdata = pm.iterationData.get(\"input\");",
											"pm.variables.set(\"input_body\",JSON.stringify(inputJSONdata));"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{admin_token}}"
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{{input_body}}"
								},
								"url": {
									"raw": "{{URL}}/projects",
									"host": [
										"{{URL}}"
									],
									"path": [
										"projects"
									]
								}
							},
							"response": []
						},
						{
							"name": "create project by m2m",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const iterationData = pm.iterationData",
											"const httpCode = iterationData.get('httpCode')",
											"pm.test(`Status code is ${httpCode}`, function () {",
											"    pm.response.to.have.status(httpCode);",
											"    const response = pm.response.json()",
											"    const iterationData = pm.iterationData",
											"    const expected = iterationData.get('expected')",
											"    for (let key of Object.keys(expected)) {",
											"        // check every fields to match expected",
											"        pm.expect(_.isEqual(response[key], expected[key])).to.eq(true)",
											"    }",
											"    if (iterationData.get('idLabel')) {",
											"        const idLabel = iterationData.get('idLabel')",
											"        pm.environment.set(idLabel, response.id)",
											"    }",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"var inputJSONdata = pm.iterationData.get(\"input\");",
											"pm.variables.set(\"input_body\",JSON.stringify(inputJSONdata));"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{m2m_token}}"
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{{input_body}}"
								},
								"url": {
									"raw": "{{URL}}/projects",
									"host": [
										"{{URL}}"
									],
									"path": [
										"projects"
									]
								}
							},
							"response": []
						},
						{
							"name": "create project by copilot",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const iterationData = pm.iterationData",
											"const httpCode = iterationData.get('httpCode')",
											"pm.test(`Status code is ${httpCode}`, function () {",
											"    pm.response.to.have.status(httpCode);",
											"    const response = pm.response.json()",
											"    const iterationData = pm.iterationData",
											"    const expected = iterationData.get('expected')",
											"    for (let key of Object.keys(expected)) {",
											"        pm.expect(_.isEqual(response[key], expected[key])).to.eq(true)",
											"    }",
											"    if (iterationData.get('idLabel')) {",
											"        const idLabel = iterationData.get('idLabel')",
											"        pm.environment.set(idLabel, response.id)",
											"    }",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"var inputJSONdata = pm.iterationData.get(\"input\");",
											"pm.variables.set(\"input_body\",JSON.stringify(inputJSONdata));"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{copilot_token}}"
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{{input_body}}"
								},
								"url": {
									"raw": "{{URL}}/projects",
									"host": [
										"{{URL}}"
									],
									"path": [
										"projects"
									]
								}
							},
							"response": []
						},
						{
							"name": "create project with all kinds of invalid request body",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const iterationData = pm.iterationData",
											"const httpCode = iterationData.get('httpCode')",
											"pm.test(`Status code is ${httpCode}`, function () {",
											"    pm.response.to.have.status(httpCode);",
											"    const response = pm.response.json()",
											"    pm.expect(response.message).to.includes(iterationData.get('message'))",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"var inputJSONdata = pm.iterationData.get(\"input\");",
											"pm.variables.set(\"input_body\",JSON.stringify(inputJSONdata));"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{admin_token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{{input_body}}"
								},
								"url": {
									"raw": "{{URL}}/projects",
									"host": [
										"{{URL}}"
									],
									"path": [
										"projects"
									]
								}
							},
							"response": []
						},
						{
							"name": "create project with all kinds of invalid token",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const iterationData = pm.iterationData",
											"const httpCode = iterationData.get('httpCode')",
											"pm.test(`Status code is ${httpCode}`, function () {",
											"    pm.response.to.have.status(httpCode);",
											"    const response = pm.response.json()",
											"    if (response.message) {",
											"        pm.expect(response.message).to.eq(iterationData.get('message'))",
											"    } else {",
											"        pm.expect(response.result.content.message).to.eq(iterationData.get('message'))",
											"    }",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "{{jwtToken}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"name\": \"POSTMANE2E-project-by-admin-valid-name-for-test\",\n    \"type\": \"{{PROJECT_TYPE_2}}\"\n}"
								},
								"url": {
									"raw": "{{URL}}/projects",
									"host": [
										"{{URL}}"
									],
									"path": [
										"projects"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "list projects",
					"item": [
						{
							"name": "list projects by admin",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(`Status code is 200`, function () {",
											"    pm.response.to.have.status(200);",
											"    const response = pm.response.json()",
											"    pm.expect(response.length).to.gt(0)",
											"    const iterationData = pm.iterationData",
											"    const expectedFields = iterationData.get('expectedFields')",
											"    for (let item of response) {",
											"        // make sure the list returns the expected fields",
											"        pm.expect(expectedFields.every(r=> Object.keys(item).indexOf(r) >= 0)).to.eq(true)",
											"    }",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"value": "Bearer {{admin_token}}",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{URL}}/projects",
									"host": [
										"{{URL}}"
									],
									"path": [
										"projects"
									]
								}
							},
							"response": []
						},
						{
							"name": "list projects by m2m",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(`Status code is 200`, function () {",
											"    pm.response.to.have.status(200);",
											"    const response = pm.response.json()",
											"    pm.expect(response.length).to.gt(0)",
											"    const iterationData = pm.iterationData",
											"    const expectedFields = iterationData.get('expectedFields')",
											"    for (let item of response) {",
											"        // make sure the list returns the expected fields",
											"        pm.expect(expectedFields.every(r=> Object.keys(item).indexOf(r) >= 0)).to.eq(true)",
											"    }",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{m2m_token}}"
									}
								],
								"url": {
									"raw": "{{URL}}/projects",
									"host": [
										"{{URL}}"
									],
									"path": [
										"projects"
									]
								}
							},
							"response": []
						},
						{
							"name": "list projects by copilot",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(`Status code is 200`, function () {",
											"    pm.response.to.have.status(200);",
											"    const response = pm.response.json()",
											"    pm.expect(response.length).to.gt(0)",
											"    const iterationData = pm.iterationData",
											"    const expectedFields = iterationData.get('expectedFields')",
											"    for (let item of response) {",
											"        // make sure the list returns the expected fields",
											"        pm.expect(expectedFields.every(r=> Object.keys(item).indexOf(r) >= 0)).to.eq(true)",
											"    }",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{copilot_token}}"
									}
								],
								"url": {
									"raw": "{{URL}}/projects",
									"host": [
										"{{URL}}"
									],
									"path": [
										"projects"
									]
								}
							},
							"response": []
						},
						{
							"name": "list projects by user",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(`Status code is 200`, function () {",
											"    pm.response.to.have.status(200);",
											"    const response = pm.response.json()",
											"    pm.expect(response.length).to.gte(0)",
											"    const iterationData = pm.iterationData",
											"    const expectedFields = iterationData.get('expectedFields')",
											"    for (let item of response) {",
											"        // make sure the list returns the expected fields",
											"        pm.expect(expectedFields.every(r=> Object.keys(item).indexOf(r) >= 0)).to.eq(true)",
											"    }",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{user_token}}"
									}
								],
								"url": {
									"raw": "{{URL}}/projects",
									"host": [
										"{{URL}}"
									],
									"path": [
										"projects"
									]
								}
							},
							"response": []
						},
						{
							"name": "list projects with various parameters",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(`Status code is 200`, function () {",
											"    pm.response.to.have.status(200);",
											"    const response = pm.response.json()",
											"    pm.expect(response.length).to.gte(0)",
											"    const iterationData = pm.iterationData",
											"    const expectedFields = iterationData.get('expectedFields')",
											"    for (let item of response) {",
											"        // make sure the list returns the expected fields",
											"        pm.expect(expectedFields.every(r=> Object.keys(item).indexOf(r) >= 0)).to.eq(true)",
											"    }",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{admin_token}}"
									}
								],
								"url": {
									"raw": "{{URL}}/projects?{{params}}",
									"host": [
										"{{URL}}"
									],
									"path": [
										"projects"
									],
									"query": [
										{
											"key": "{{params}}",
											"value": null
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "list projects with invalid parameters",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const iterationData = pm.iterationData",
											"const httpCode = iterationData.get('httpCode')",
											"pm.test(`Status code is ${httpCode}`, function () {",
											"    pm.response.to.have.status(httpCode);",
											"    const response = pm.response.json()",
											"    pm.expect(response.message).to.eq(iterationData.get('message'))",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{user_token}}"
									}
								],
								"url": {
									"raw": "{{URL}}/projects?{{params}}",
									"host": [
										"{{URL}}"
									],
									"path": [
										"projects"
									],
									"query": [
										{
											"key": "{{params}}",
											"value": null
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "list projects with all kinds of invalid token",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const iterationData = pm.iterationData",
											"const httpCode = iterationData.get('httpCode')",
											"pm.test(`Status code is ${httpCode}`, function () {",
											"    pm.response.to.have.status(httpCode);",
											"    const response = pm.response.json()",
											"    if (response.message) {",
											"        pm.expect(response.message).to.eq(iterationData.get('message'))",
											"    } else {",
											"        pm.expect(response.result.content.message).to.eq(iterationData.get('message'))",
											"    }",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "{{jwtToken}}"
									}
								],
								"url": {
									"raw": "{{URL}}/projects",
									"host": [
										"{{URL}}"
									],
									"path": [
										"projects"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "get project",
					"item": [
						{
							"name": "get project by admin",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const iterationData = pm.iterationData",
											"const httpCode = iterationData.get('httpCode')",
											"pm.test(`Status code is ${httpCode}`, function () {",
											"    pm.response.to.have.status(httpCode);",
											"    if(httpCode === 200){",
											"        const response = pm.response.json()",
											"        const iterationData = pm.iterationData",
											"        const expected = iterationData.get('expected')",
											"        for (let key of Object.keys(expected)) {",
											"            pm.expect(_.isEqual(response[key], expected[key])).to.eq(true)",
											"        }",
											"    }",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{admin_token}}"
									}
								],
								"url": {
									"raw": "{{URL}}/projects/{{id}}?{{params}}",
									"host": [
										"{{URL}}"
									],
									"path": [
										"projects",
										"{{id}}"
									],
									"query": [
										{
											"key": "{{params}}",
											"value": null
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "get project by m2m",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const iterationData = pm.iterationData",
											"const httpCode = iterationData.get('httpCode')",
											"pm.test(`Status code is ${httpCode}`, function () {",
											"    pm.response.to.have.status(httpCode);",
											"    if(httpCode === 200){",
											"        const response = pm.response.json()",
											"        const iterationData = pm.iterationData",
											"        const expected = iterationData.get('expected')",
											"        for (let key of Object.keys(expected)) {",
											"            pm.expect(_.isEqual(response[key], expected[key])).to.eq(true)",
											"        }",
											"    }",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{admin_token}}"
									}
								],
								"url": {
									"raw": "{{URL}}/projects/{{id}}?{{params}}",
									"host": [
										"{{URL}}"
									],
									"path": [
										"projects",
										"{{id}}"
									],
									"query": [
										{
											"key": "{{params}}",
											"value": null
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "get project by copilot",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const iterationData = pm.iterationData",
											"const httpCode = iterationData.get('httpCode')",
											"pm.test(`Status code is ${httpCode}`, function () {",
											"    pm.response.to.have.status(httpCode);",
											"    if(httpCode === 200){",
											"        const response = pm.response.json()",
											"        const iterationData = pm.iterationData",
											"        const expected = iterationData.get('expected')",
											"        for (let key of Object.keys(expected)) {",
											"            pm.expect(_.isEqual(response[key], expected[key])).to.eq(true)",
											"        }",
											"    }",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{copilot_token}}"
									}
								],
								"url": {
									"raw": "{{URL}}/projects/{{id}}?{{params}}",
									"host": [
										"{{URL}}"
									],
									"path": [
										"projects",
										"{{id}}"
									],
									"query": [
										{
											"key": "{{params}}",
											"value": null
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "get project with invalid requests",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const iterationData = pm.iterationData",
											"const httpCode = iterationData.get('httpCode')",
											"pm.test(`Status code is ${httpCode}`, function () {",
											"    pm.response.to.have.status(httpCode);",
											"    const response = pm.response.json()",
											"    pm.expect(response.message).to.eq(iterationData.get('message'))",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{admin_token}}"
									}
								],
								"url": {
									"raw": "{{URL}}/projects/{{id}}",
									"host": [
										"{{URL}}"
									],
									"path": [
										"projects",
										"{{id}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "get project with all kinds of invalid token",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const iterationData = pm.iterationData",
											"const httpCode = iterationData.get('httpCode')",
											"pm.test(`Status code is ${httpCode}`, function () {",
											"    pm.response.to.have.status(httpCode);",
											"    const response = pm.response.json()",
											"    if (response.message) {",
											"        pm.expect(response.message).to.eq(iterationData.get('message'))",
											"    } else {",
											"        pm.expect(response.result.content.message).to.eq(iterationData.get('message'))",
											"    }",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "{{jwtToken}}"
									}
								],
								"url": {
									"raw": "{{URL}}/projects/{{id}}",
									"host": [
										"{{URL}}"
									],
									"path": [
										"projects",
										"{{id}}"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "patch project",
					"item": [
						{
							"name": "patch project by admin",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const iterationData = pm.iterationData",
											"const httpCode = iterationData.get('httpCode')",
											"pm.test(`Status code is ${httpCode}`, function () {",
											"    pm.response.to.have.status(httpCode);",
											"    const response = pm.response.json()",
											"    const iterationData = pm.iterationData",
											"    const expected = iterationData.get('expected')",
											"    for (let key of Object.keys(expected)) {",
											"        pm.expect(_.isEqual(response[key], expected[key])).to.eq(true)",
											"    }",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"var inputJSONdata = pm.iterationData.get(\"input\");",
											"pm.variables.set(\"input_body\",JSON.stringify(inputJSONdata));"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PATCH",
								"header": [
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{admin_token}}"
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{{input_body}}"
								},
								"url": {
									"raw": "{{URL}}/projects/{{id}}",
									"host": [
										"{{URL}}"
									],
									"path": [
										"projects",
										"{{id}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "patch project by m2m",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const iterationData = pm.iterationData",
											"const httpCode = iterationData.get('httpCode')",
											"pm.test(`Status code is ${httpCode}`, function () {",
											"    pm.response.to.have.status(httpCode);",
											"    const response = pm.response.json()",
											"    const iterationData = pm.iterationData",
											"    const expected = iterationData.get('expected')",
											"    for (let key of Object.keys(expected)) {",
											"        pm.expect(_.isEqual(response[key], expected[key])).to.eq(true)",
											"    }",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"var inputJSONdata = pm.iterationData.get(\"input\");",
											"pm.variables.set(\"input_body\",JSON.stringify(inputJSONdata));"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PATCH",
								"header": [
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{admin_token}}"
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{{input_body}}"
								},
								"url": {
									"raw": "{{URL}}/projects/{{id}}",
									"host": [
										"{{URL}}"
									],
									"path": [
										"projects",
										"{{id}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "patch project by copilot",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const iterationData = pm.iterationData",
											"const httpCode = iterationData.get('httpCode')",
											"pm.test(`Status code is ${httpCode}`, function () {",
											"    pm.response.to.have.status(httpCode);",
											"    const response = pm.response.json()",
											"    const iterationData = pm.iterationData",
											"    const expected = iterationData.get('expected')",
											"    for (let key of Object.keys(expected)) {",
											"        pm.expect(_.isMatch(response[key], expected[key])).to.eq(true)",
											"    }",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"var inputJSONdata = pm.iterationData.get(\"input\");",
											"pm.variables.set(\"input_body\",JSON.stringify(inputJSONdata));"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PATCH",
								"header": [
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{copilot_token}}"
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{{input_body}}"
								},
								"url": {
									"raw": "{{URL}}/projects/{{id}}",
									"host": [
										"{{URL}}"
									],
									"path": [
										"projects",
										"{{id}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "patch project with all kinds of invalid request body",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const iterationData = pm.iterationData",
											"const httpCode = iterationData.get('httpCode')",
											"pm.test(`Status code is ${httpCode}`, function () {",
											"    pm.response.to.have.status(httpCode);",
											"    const response = pm.response.json()",
											"    pm.expect(response.message).to.contains(iterationData.get('message'))",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"var inputJSONdata = pm.iterationData.get(\"input\");",
											"pm.variables.set(\"input_body\",JSON.stringify(inputJSONdata));"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PATCH",
								"header": [
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{admin_token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{{input_body}}"
								},
								"url": {
									"raw": "{{URL}}/projects/{{id}}",
									"host": [
										"{{URL}}"
									],
									"path": [
										"projects",
										"{{id}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "patch project with all kinds of invalid token",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const iterationData = pm.iterationData",
											"const httpCode = iterationData.get('httpCode')",
											"pm.test(`Status code is ${httpCode}`, function () {",
											"    pm.response.to.have.status(httpCode);",
											"    const response = pm.response.json()",
											"    if (response.message) {",
											"        pm.expect(response.message).to.eq(iterationData.get('message'))",
											"    } else {",
											"        pm.expect(response.result.content.message).to.eq(iterationData.get('message'))",
											"    }",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PATCH",
								"header": [
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "{{jwtToken}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n}"
								},
								"url": {
									"raw": "{{URL}}/projects/{{id}}",
									"host": [
										"{{URL}}"
									],
									"path": [
										"projects",
										"{{id}}"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "delete project",
					"item": [
						{
							"name": "delete project by admin",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(`Status code is 204`, function () {",
											"    pm.response.to.have.status(204)",
											"    const response = pm.response.text()",
											"    pm.expect(response).to.eq('')",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{admin_token}}"
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"url": {
									"raw": "{{URL}}/projects/{{PROJECT_5}}",
									"host": [
										"{{URL}}"
									],
									"path": [
										"projects",
										"{{PROJECT_5}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "delete project by m2m",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(`Status code is 204`, function () {",
											"    pm.response.to.have.status(204)",
											"    const response = pm.response.text()",
											"    pm.expect(response).to.eq('')",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{m2m_token}}"
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"url": {
									"raw": "{{URL}}/projects/{{PROJECT_6}}",
									"host": [
										"{{URL}}"
									],
									"path": [
										"projects",
										"{{PROJECT_6}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "delete project by copilot",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(`Status code is 204`, function () {",
											"    pm.response.to.have.status(204)",
											"    const response = pm.response.text()",
											"    pm.expect(response).to.eq('')",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{copilot_token}}"
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"url": {
									"raw": "{{URL}}/projects/{{PROJECT_7}}",
									"host": [
										"{{URL}}"
									],
									"path": [
										"projects",
										"{{PROJECT_7}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "delete project with all kinds of invalid request",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const iterationData = pm.iterationData",
											"const httpCode = iterationData.get('httpCode')",
											"pm.test(`Status code is ${httpCode}`, function () {",
											"    pm.response.to.have.status(httpCode);",
											"    const response = pm.response.json()",
											"    if (response.message) {",
											"        pm.expect(response.message).to.contains(iterationData.get('message'))",
											"    } else {",
											"        pm.expect(response.result.content.message).to.eq(iterationData.get('message'))",
											"    }",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "{{jwtToken}}"
									}
								],
								"url": {
									"raw": "{{URL}}/projects/{{id}}",
									"host": [
										"{{URL}}"
									],
									"path": [
										"projects",
										"{{id}}"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "upgrade project",
					"item": [
						{
							"name": "upgrade project type by admin",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const iterationData = pm.iterationData",
											"const httpCode = iterationData.get('httpCode')",
											"pm.test(`Status code is ${httpCode}`, function () {",
											"    pm.response.to.have.status(httpCode);",
											"    const response = pm.response.json()",
											"    const iterationData = pm.iterationData",
											"    const expected = iterationData.get('expected')",
											"    for (let key of Object.keys(expected)) {",
											"        pm.expect(_.isEqual(response[key], expected[key])).to.eq(true)",
											"    }",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"var inputJSONdata = pm.iterationData.get(\"input\");",
											"pm.variables.set(\"input_body\",JSON.stringify(inputJSONdata));"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{admin_token}}"
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{{input_body}}"
								},
								"url": {
									"raw": "{{URL}}/projects/{{id}}/upgrade",
									"host": [
										"{{URL}}"
									],
									"path": [
										"projects",
										"{{id}}",
										"upgrade"
									]
								}
							},
							"response": []
						},
						{
							"name": "upgrade project type by m2m",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const iterationData = pm.iterationData",
											"const httpCode = iterationData.get('httpCode')",
											"pm.test(`Status code is ${httpCode}`, function () {",
											"    pm.response.to.have.status(httpCode);",
											"    const response = pm.response.json()",
											"    const iterationData = pm.iterationData",
											"    const expected = iterationData.get('expected')",
											"    for (let key of Object.keys(expected)) {",
											"        pm.expect(_.isEqual(response[key], expected[key])).to.eq(true)",
											"    }",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"var inputJSONdata = pm.iterationData.get(\"input\");",
											"pm.variables.set(\"input_body\",JSON.stringify(inputJSONdata));"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{m2m_token}}"
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{{input_body}}"
								},
								"url": {
									"raw": "{{URL}}/projects/{{id}}/upgrade",
									"host": [
										"{{URL}}"
									],
									"path": [
										"projects",
										"{{id}}",
										"upgrade"
									]
								}
							},
							"response": []
						},
						{
							"name": "upgrade project with all kinds of invalid request body",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const iterationData = pm.iterationData",
											"const httpCode = iterationData.get('httpCode')",
											"pm.test(`Status code is ${httpCode}`, function () {",
											"    pm.response.to.have.status(httpCode);",
											"    const response = pm.response.json()",
											"    pm.expect(response.message).to.contains(iterationData.get('message'))",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"var inputJSONdata = pm.iterationData.get(\"input\");",
											"pm.variables.set(\"input_body\",JSON.stringify(inputJSONdata));"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{admin_token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{{input_body}}"
								},
								"url": {
									"raw": "{{URL}}/projects/{{id}}/upgrade",
									"host": [
										"{{URL}}"
									],
									"path": [
										"projects",
										"{{id}}",
										"upgrade"
									]
								}
							},
							"response": []
						},
						{
							"name": "upgrade project with all kinds of invalid token",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const iterationData = pm.iterationData",
											"const httpCode = iterationData.get('httpCode')",
											"pm.test(`Status code is ${httpCode}`, function () {",
											"    pm.response.to.have.status(httpCode);",
											"    const response = pm.response.json()",
											"    if (response.message) {",
											"        pm.expect(response.message).to.eq(iterationData.get('message'))",
											"    } else {",
											"        pm.expect(response.result.content.message).to.eq(iterationData.get('message'))",
											"    }",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "{{jwtToken}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"targetVersion\": \"v3\",\n    \"defaultProductTemplateId\": 9\n}"
								},
								"url": {
									"raw": "{{URL}}/projects/{{id}}/upgrade",
									"host": [
										"{{URL}}"
									],
									"path": [
										"projects",
										"{{id}}",
										"upgrade"
									]
								}
							},
							"response": []
						}
					]
				}
			]
		},
		{
			"name": "Project Attachment",
			"item": [
				{
					"name": "create project attachment",
					"item": [
						{
							"name": "create project attachment by admin",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const iterationData = pm.iterationData",
											"const httpCode = iterationData.get('httpCode')",
											"pm.test(`Status code is ${httpCode}`, function () {",
											"    pm.response.to.have.status(httpCode);",
											"    const response = pm.response.json()",
											"    const iterationData = pm.iterationData",
											"    const expected = iterationData.get('expected')",
											"    for (let key of Object.keys(expected)) {",
											"        pm.expect(_.isEqual(response[key], expected[key])).to.eq(true)",
											"    }",
											"    if (iterationData.get('idLabel')) {",
											"        const idLabel = iterationData.get('idLabel')",
											"        pm.environment.set(idLabel, response.id)",
											"    }",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"var inputJSONdata = pm.iterationData.get(\"input\");",
											"pm.variables.set(\"input_body\",JSON.stringify(inputJSONdata));"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{admin_token}}"
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{{input_body}}"
								},
								"url": {
									"raw": "{{URL}}/projects/{{project_id}}/attachments",
									"host": [
										"{{URL}}"
									],
									"path": [
										"projects",
										"{{project_id}}",
										"attachments"
									]
								}
							},
							"response": []
						},
						{
							"name": "create project attachment by m2m",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const iterationData = pm.iterationData",
											"const httpCode = iterationData.get('httpCode')",
											"pm.test(`Status code is ${httpCode}`, function () {",
											"    pm.response.to.have.status(httpCode);",
											"    const response = pm.response.json()",
											"    const iterationData = pm.iterationData",
											"    const expected = iterationData.get('expected')",
											"    for (let key of Object.keys(expected)) {",
											"        pm.expect(_.isEqual(response[key], expected[key])).to.eq(true)",
											"    }",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"var inputJSONdata = pm.iterationData.get(\"input\");",
											"pm.variables.set(\"input_body\",JSON.stringify(inputJSONdata));"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{m2m_token}}"
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{{input_body}}"
								},
								"url": {
									"raw": "{{URL}}/projects/{{project_id}}/attachments",
									"host": [
										"{{URL}}"
									],
									"path": [
										"projects",
										"{{project_id}}",
										"attachments"
									]
								}
							},
							"response": []
						},
						{
							"name": "create project attachment by copilot",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const iterationData = pm.iterationData",
											"const httpCode = iterationData.get('httpCode')",
											"pm.test(`Status code is ${httpCode}`, function () {",
											"    pm.response.to.have.status(httpCode);",
											"    const response = pm.response.json()",
											"    const iterationData = pm.iterationData",
											"    const expected = iterationData.get('expected')",
											"    for (let key of Object.keys(expected)) {",
											"        pm.expect(_.isEqual(response[key], expected[key])).to.eq(true)",
											"    }",
											"    if (iterationData.get('idLabel')) {",
											"        const idLabel = iterationData.get('idLabel')",
											"        pm.environment.set(idLabel, response.id)",
											"    }",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"var inputJSONdata = pm.iterationData.get(\"input\");",
											"pm.variables.set(\"input_body\",JSON.stringify(inputJSONdata));"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{copilot_token}}"
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{{input_body}}"
								},
								"url": {
									"raw": "{{URL}}/projects/{{project_id}}/attachments",
									"host": [
										"{{URL}}"
									],
									"path": [
										"projects",
										"{{project_id}}",
										"attachments"
									]
								}
							},
							"response": []
						},
						{
							"name": "create project attachment with all kinds of invalid request body",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const iterationData = pm.iterationData",
											"const httpCode = iterationData.get('httpCode')",
											"pm.test(`Status code is ${httpCode}`, function () {",
											"    pm.response.to.have.status(httpCode);",
											"    const response = pm.response.json()",
											"    pm.expect(response.message).to.eq(iterationData.get('message'))",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"var inputJSONdata = pm.iterationData.get(\"input\");",
											"pm.variables.set(\"input_body\",JSON.stringify(inputJSONdata));"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{admin_token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{{input_body}}"
								},
								"url": {
									"raw": "{{URL}}/projects/{{project_id}}/attachments",
									"host": [
										"{{URL}}"
									],
									"path": [
										"projects",
										"{{project_id}}",
										"attachments"
									]
								}
							},
							"response": []
						},
						{
							"name": "create project attachment with all kinds of invalid token",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const iterationData = pm.iterationData",
											"const httpCode = iterationData.get('httpCode')",
											"pm.test(`Status code is ${httpCode}`, function () {",
											"    pm.response.to.have.status(httpCode);",
											"    const response = pm.response.json()",
											"    if (response.message) {",
											"        pm.expect(response.message).to.eq(iterationData.get('message'))",
											"    } else {",
											"        pm.expect(response.result.content.message).to.eq(iterationData.get('message'))",
											"    }",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "{{jwtToken}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"title\": \"POSTMANE2E-Project-Attachment-by-admin-only-required-fields\",\n    \"path\": \"https://connect.topcoder-dev.com/projects/8600/assets.zip\",\n    \"type\": \"link\"\n}"
								},
								"url": {
									"raw": "{{URL}}/projects/{{project_id}}/attachments",
									"host": [
										"{{URL}}"
									],
									"path": [
										"projects",
										"{{project_id}}",
										"attachments"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "list project attachments",
					"item": [
						{
							"name": "list project attachments by admin",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(`Status code is 200`, function () {",
											"    pm.response.to.have.status(200);",
											"    const response = pm.response.json()",
											"    pm.expect(response.length).to.gt(0)",
											"    const iterationData = pm.iterationData",
											"    const expectedFields = iterationData.get('expectedFields')",
											"    for (let item of response) {",
											"        // make sure the list returns the expected fields",
											"        pm.expect(expectedFields.every(r=> Object.keys(item).indexOf(r) >= 0)).to.eq(true)",
											"    }",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"value": "Bearer {{admin_token}}",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{URL}}/projects/{{project_id}}/attachments",
									"host": [
										"{{URL}}"
									],
									"path": [
										"projects",
										"{{project_id}}",
										"attachments"
									]
								}
							},
							"response": []
						},
						{
							"name": "list project attachments by m2m",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(`Status code is 200`, function () {",
											"    pm.response.to.have.status(200);",
											"    const response = pm.response.json()",
											"    pm.expect(response.length).to.gt(0)",
											"    const iterationData = pm.iterationData",
											"    const expectedFields = iterationData.get('expectedFields')",
											"    for (let item of response) {",
											"        // make sure the list returns the expected fields",
											"        pm.expect(expectedFields.every(r=> Object.keys(item).indexOf(r) >= 0)).to.eq(true)",
											"    }",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{m2m_token}}"
									}
								],
								"url": {
									"raw": "{{URL}}/projects/{{project_id}}/attachments",
									"host": [
										"{{URL}}"
									],
									"path": [
										"projects",
										"{{project_id}}",
										"attachments"
									]
								}
							},
							"response": []
						},
						{
							"name": "list project attachments by copilot",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(`Status code is 200`, function () {",
											"    pm.response.to.have.status(200);",
											"    const response = pm.response.json()",
											"    pm.expect(response.length).to.gt(0)",
											"    const iterationData = pm.iterationData",
											"    const expectedFields = iterationData.get('expectedFields')",
											"    for (let item of response) {",
											"        // make sure the list returns the expected fields",
											"        pm.expect(expectedFields.every(r=> Object.keys(item).indexOf(r) >= 0)).to.eq(true)",
											"    }",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{copilot_token}}"
									}
								],
								"url": {
									"raw": "{{URL}}/projects/{{project_id}}/attachments",
									"host": [
										"{{URL}}"
									],
									"path": [
										"projects",
										"{{project_id}}",
										"attachments"
									]
								}
							},
							"response": []
						},
						{
							"name": "list project attachments with all kinds of invalid token",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const iterationData = pm.iterationData",
											"const httpCode = iterationData.get('httpCode')",
											"pm.test(`Status code is ${httpCode}`, function () {",
											"    pm.response.to.have.status(httpCode);",
											"    const response = pm.response.json()",
											"    if (response.message) {",
											"        pm.expect(response.message).to.eq(iterationData.get('message'))",
											"    } else {",
											"        pm.expect(response.result.content.message).to.eq(iterationData.get('message'))",
											"    }",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "{{jwtToken}}"
									}
								],
								"url": {
									"raw": "{{URL}}/projects/{{project_id}}/attachments",
									"host": [
										"{{URL}}"
									],
									"path": [
										"projects",
										"{{project_id}}",
										"attachments"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "get project attachment",
					"item": [
						{
							"name": "get project attachment by admin",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const iterationData = pm.iterationData",
											"const httpCode = iterationData.get('httpCode')",
											"pm.test(`Status code is ${httpCode}`, function () {",
											"    pm.response.to.have.status(httpCode);",
											"    if(httpCode === 200){",
											"        const response = pm.response.json()",
											"        const iterationData = pm.iterationData",
											"        const expected = iterationData.get('expected')",
											"        for (let key of Object.keys(expected)) {",
											"            pm.expect(JSON.stringify(response[key])).to.eq(JSON.stringify(expected[key]))",
											"        }",
											"    }",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{admin_token}}"
									}
								],
								"url": {
									"raw": "{{URL}}/projects/{{project_id}}/attachments/{{id}}",
									"host": [
										"{{URL}}"
									],
									"path": [
										"projects",
										"{{project_id}}",
										"attachments",
										"{{id}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "get project attachment by m2m",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const iterationData = pm.iterationData",
											"const httpCode = iterationData.get('httpCode')",
											"pm.test(`Status code is ${httpCode}`, function () {",
											"    pm.response.to.have.status(httpCode);",
											"    if(httpCode === 200){",
											"        const response = pm.response.json()",
											"        const iterationData = pm.iterationData",
											"        const expected = iterationData.get('expected')",
											"        for (let key of Object.keys(expected)) {",
											"            pm.expect(JSON.stringify(response[key])).to.eq(JSON.stringify(expected[key]))",
											"        }",
											"    }",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{m2m_token}}"
									}
								],
								"url": {
									"raw": "{{URL}}/projects/{{project_id}}/attachments/{{id}}",
									"host": [
										"{{URL}}"
									],
									"path": [
										"projects",
										"{{project_id}}",
										"attachments",
										"{{id}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "get project attachment by copilot",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const iterationData = pm.iterationData",
											"const httpCode = iterationData.get('httpCode')",
											"pm.test(`Status code is ${httpCode}`, function () {",
											"    pm.response.to.have.status(httpCode);",
											"    if(httpCode === 200){",
											"        const response = pm.response.json()",
											"        const iterationData = pm.iterationData",
											"        const expected = iterationData.get('expected')",
											"        for (let key of Object.keys(expected)) {",
											"            pm.expect(JSON.stringify(response[key])).to.eq(JSON.stringify(expected[key]))",
											"        }",
											"    }",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{copilot_token}}"
									}
								],
								"url": {
									"raw": "{{URL}}/projects/{{project_id}}/attachments/{{id}}",
									"host": [
										"{{URL}}"
									],
									"path": [
										"projects",
										"{{project_id}}",
										"attachments",
										"{{id}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "get project attachment with invalid requests",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const iterationData = pm.iterationData",
											"const httpCode = iterationData.get('httpCode')",
											"pm.test(`Status code is ${httpCode}`, function () {",
											"    pm.response.to.have.status(httpCode);",
											"    const response = pm.response.json()",
											"    pm.expect(response.message).to.eq(iterationData.get('message'))",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{admin_token}}"
									}
								],
								"url": {
									"raw": "{{URL}}/projects/{{project_id}}/attachments/{{id}}",
									"host": [
										"{{URL}}"
									],
									"path": [
										"projects",
										"{{project_id}}",
										"attachments",
										"{{id}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "get project attachment with all kinds of invalid token",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const iterationData = pm.iterationData",
											"const httpCode = iterationData.get('httpCode')",
											"pm.test(`Status code is ${httpCode}`, function () {",
											"    pm.response.to.have.status(httpCode);",
											"    const response = pm.response.json()",
											"    if (response.message) {",
											"        pm.expect(response.message).to.eq(iterationData.get('message'))",
											"    } else {",
											"        pm.expect(response.result.content.message).to.eq(iterationData.get('message'))",
											"    }",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "{{jwtToken}}"
									}
								],
								"url": {
									"raw": "{{URL}}/projects/{{project_id}}/attachments/{{id}}",
									"host": [
										"{{URL}}"
									],
									"path": [
										"projects",
										"{{project_id}}",
										"attachments",
										"{{id}}"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "patch project attachment",
					"item": [
						{
							"name": "patch project attachment by admin",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const iterationData = pm.iterationData",
											"const httpCode = iterationData.get('httpCode')",
											"pm.test(`Status code is ${httpCode}`, function () {",
											"    pm.response.to.have.status(httpCode);",
											"    const response = pm.response.json()",
											"    const iterationData = pm.iterationData",
											"    const expected = iterationData.get('expected')",
											"    for (let key of Object.keys(expected)) {",
											"        if (_.isString(expected[key]) && expected[key].startsWith('{')) {",
											"            pm.expect(_.isEqual(response[key], pm.environment.get(expected[key].substr(2, expected[key].length - 4)))).to.eq(true)",
											"        } else {",
											"            pm.expect(_.isEqual(response[key], expected[key])).to.eq(true)",
											"        }",
											"    }",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"var inputJSONdata = pm.iterationData.get(\"input\");",
											"pm.variables.set(\"input_body\",JSON.stringify(inputJSONdata));"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PATCH",
								"header": [
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{admin_token}}"
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{{input_body}}"
								},
								"url": {
									"raw": "{{URL}}/projects/{{project_id}}/attachments/{{id}}",
									"host": [
										"{{URL}}"
									],
									"path": [
										"projects",
										"{{project_id}}",
										"attachments",
										"{{id}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "patch project attachment by m2m",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const iterationData = pm.iterationData",
											"const httpCode = iterationData.get('httpCode')",
											"pm.test(`Status code is ${httpCode}`, function () {",
											"    pm.response.to.have.status(httpCode);",
											"    const response = pm.response.json()",
											"    const iterationData = pm.iterationData",
											"    const expected = iterationData.get('expected')",
											"    for (let key of Object.keys(expected)) {",
											"        if (_.isString(expected[key]) && expected[key].startsWith('{')) {",
											"            pm.expect(_.isEqual(response[key], pm.environment.get(expected[key].substr(2, expected[key].length - 4)))).to.eq(true)",
											"        } else {",
											"            pm.expect(_.isEqual(response[key], expected[key])).to.eq(true)",
											"        }",
											"    }",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"var inputJSONdata = pm.iterationData.get(\"input\");",
											"pm.variables.set(\"input_body\",JSON.stringify(inputJSONdata));"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PATCH",
								"header": [
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{m2m_token}}"
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{{input_body}}"
								},
								"url": {
									"raw": "{{URL}}/projects/{{project_id}}/attachments/{{id}}",
									"host": [
										"{{URL}}"
									],
									"path": [
										"projects",
										"{{project_id}}",
										"attachments",
										"{{id}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "patch project attachment by copilot",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const iterationData = pm.iterationData",
											"const httpCode = iterationData.get('httpCode')",
											"pm.test(`Status code is ${httpCode}`, function () {",
											"    pm.response.to.have.status(httpCode);",
											"    const response = pm.response.json()",
											"    const iterationData = pm.iterationData",
											"    const expected = iterationData.get('expected')",
											"    for (let key of Object.keys(expected)) {",
											"        if (_.isString(expected[key]) && expected[key].startsWith('{')) {",
											"            pm.expect(_.isEqual(response[key], pm.environment.get(expected[key].substr(2, expected[key].length - 4)))).to.eq(true)",
											"        } else {",
											"            pm.expect(_.isEqual(response[key], expected[key])).to.eq(true)",
											"        }",
											"    }",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"var inputJSONdata = pm.iterationData.get(\"input\");",
											"pm.variables.set(\"input_body\",JSON.stringify(inputJSONdata));"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PATCH",
								"header": [
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{copilot_token}}"
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{{input_body}}"
								},
								"url": {
									"raw": "{{URL}}/projects/{{project_id}}/attachments/{{id}}",
									"host": [
										"{{URL}}"
									],
									"path": [
										"projects",
										"{{project_id}}",
										"attachments",
										"{{id}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "patch project attachment with all kinds of invalid request body",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const iterationData = pm.iterationData",
											"const httpCode = iterationData.get('httpCode')",
											"pm.test(`Status code is ${httpCode}`, function () {",
											"    pm.response.to.have.status(httpCode);",
											"    const response = pm.response.json()",
											"    pm.expect(response.message).to.eq(iterationData.get('message'))",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"var inputJSONdata = pm.iterationData.get(\"input\");",
											"pm.variables.set(\"input_body\",JSON.stringify(inputJSONdata));"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PATCH",
								"header": [
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{admin_token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{{input_body}}"
								},
								"url": {
									"raw": "{{URL}}/projects/{{project_id}}/attachments/{{id}}",
									"host": [
										"{{URL}}"
									],
									"path": [
										"projects",
										"{{project_id}}",
										"attachments",
										"{{id}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "patch project attachment with all kinds of invalid token",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const iterationData = pm.iterationData",
											"const httpCode = iterationData.get('httpCode')",
											"pm.test(`Status code is ${httpCode}`, function () {",
											"    pm.response.to.have.status(httpCode);",
											"    const response = pm.response.json()",
											"    if (response.message) {",
											"        pm.expect(response.message).to.eq(iterationData.get('message'))",
											"    } else {",
											"        pm.expect(response.result.content.message).to.eq(iterationData.get('message'))",
											"    }",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PATCH",
								"header": [
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "{{jwtToken}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"title\": \"POSTMANE2E-new title 1 updated\"\n}"
								},
								"url": {
									"raw": "{{URL}}/projects/{{project_id}}/attachments/{{id}}",
									"host": [
										"{{URL}}"
									],
									"path": [
										"projects",
										"{{project_id}}",
										"attachments",
										"{{id}}"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "delete project attachment",
					"item": [
						{
							"name": "delete project attachment by admin",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(`Status code is 204`, function () {",
											"    pm.response.to.have.status(204)",
											"    const response = pm.response.text()",
											"    pm.expect(response).to.eq('')",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{admin_token}}"
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"url": {
									"raw": "{{URL}}/projects/{{project_id}}/attachments/{{id}}",
									"host": [
										"{{URL}}"
									],
									"path": [
										"projects",
										"{{project_id}}",
										"attachments",
										"{{id}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "delete project attachment by m2m",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(`Status code is 204`, function () {",
											"    pm.response.to.have.status(204)",
											"    const response = pm.response.text()",
											"    pm.expect(response).to.eq('')",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{m2m_token}}"
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"url": {
									"raw": "{{URL}}/projects/{{project_id}}/attachments/{{id}}",
									"host": [
										"{{URL}}"
									],
									"path": [
										"projects",
										"{{project_id}}",
										"attachments",
										"{{id}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "delete project attachment by copilot",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(`Status code is 204`, function () {",
											"    pm.response.to.have.status(204)",
											"    const response = pm.response.text()",
											"    pm.expect(response).to.eq('')",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{copilot_token}}"
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"url": {
									"raw": "{{URL}}/projects/{{project_id}}/attachments/{{id}}",
									"host": [
										"{{URL}}"
									],
									"path": [
										"projects",
										"{{project_id}}",
										"attachments",
										"{{id}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "delete project attachment with all kinds of invalid request",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const iterationData = pm.iterationData",
											"const httpCode = iterationData.get('httpCode')",
											"pm.test(`Status code is ${httpCode}`, function () {",
											"    pm.response.to.have.status(httpCode);",
											"    const response = pm.response.json()",
											"    if (response.message) {",
											"        pm.expect(response.message).to.contains(iterationData.get('message'))",
											"    } else {",
											"        pm.expect(response.result.content.message).to.eq(iterationData.get('message'))",
											"    }",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "{{jwtToken}}"
									}
								],
								"url": {
									"raw": "{{URL}}/projects/{{project_id}}/attachments/{{id}}",
									"host": [
										"{{URL}}"
									],
									"path": [
										"projects",
										"{{project_id}}",
										"attachments",
										"{{id}}"
									]
								}
							},
							"response": []
						}
					]
				}
			]
		},
		{
			"name": "Project Member",
			"item": [
				{
					"name": "create project member",
					"item": [
						{
							"name": "create project member by admin",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const iterationData = pm.iterationData",
											"const httpCode = iterationData.get('httpCode')",
											"pm.test(`Status code is ${httpCode}`, function () {",
											"    pm.response.to.have.status(httpCode);",
											"    const response = pm.response.json()",
											"    const iterationData = pm.iterationData",
											"    const expected = iterationData.get('expected')",
											"    for (let key of Object.keys(expected)) {",
											"        if (_.isString(expected[key]) && expected[key].startsWith('{')) {",
											"            pm.expect(_.isEqual(response[key], pm.environment.get(expected[key].substr(2, expected[key].length - 4)))).to.eq(true)",
											"        } else {",
											"            pm.expect(_.isEqual(response[key], expected[key])).to.eq(true)",
											"        }",
											"    }",
											"    if (iterationData.get('idLabel')) {",
											"        const idLabel = iterationData.get('idLabel')",
											"        pm.environment.set(idLabel, response.id)",
											"    }",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"var inputJSONdata = pm.iterationData.get(\"input\");",
											"pm.variables.set(\"input_body\",JSON.stringify(inputJSONdata));"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{admin_token}}"
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{{input_body}}"
								},
								"url": {
									"raw": "{{URL}}/projects/{{project_id}}/members",
									"host": [
										"{{URL}}"
									],
									"path": [
										"projects",
										"{{project_id}}",
										"members"
									]
								}
							},
							"response": []
						},
						{
							"name": "create project member by m2m",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const iterationData = pm.iterationData",
											"const httpCode = iterationData.get('httpCode')",
											"pm.test(`Status code is ${httpCode}`, function () {",
											"    pm.response.to.have.status(httpCode);",
											"    const response = pm.response.json()",
											"    const iterationData = pm.iterationData",
											"    const expected = iterationData.get('expected')",
											"    for (let key of Object.keys(expected)) {",
											"        if (_.isString(expected[key]) && expected[key].startsWith('{')) {",
											"            pm.expect(_.isEqual(response[key], pm.environment.get(expected[key].substr(2, expected[key].length - 4)))).to.eq(true)",
											"        } else {",
											"            pm.expect(_.isEqual(response[key], expected[key])).to.eq(true)",
											"        }",
											"    }",
											"    if (iterationData.get('idLabel')) {",
											"        const idLabel = iterationData.get('idLabel')",
											"        pm.environment.set(idLabel, response.id)",
											"    }",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"var inputJSONdata = pm.iterationData.get(\"input\");",
											"pm.variables.set(\"input_body\",JSON.stringify(inputJSONdata));"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{admin_token}}"
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{{input_body}}"
								},
								"url": {
									"raw": "{{URL}}/projects/{{project_id}}/members",
									"host": [
										"{{URL}}"
									],
									"path": [
										"projects",
										"{{project_id}}",
										"members"
									]
								}
							},
							"response": []
						},
						{
							"name": "create project member with all kinds of invalid request body",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const iterationData = pm.iterationData",
											"const httpCode = iterationData.get('httpCode')",
											"pm.test(`Status code is ${httpCode}`, function () {",
											"    pm.response.to.have.status(httpCode);",
											"    const response = pm.response.json()",
											"    pm.expect(response.message).to.eq(iterationData.get('message'))",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"var inputJSONdata = pm.iterationData.get(\"input\");",
											"pm.variables.set(\"input_body\",JSON.stringify(inputJSONdata));"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{admin_token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{{input_body}}"
								},
								"url": {
									"raw": "{{URL}}/projects/{{project_id}}/members",
									"host": [
										"{{URL}}"
									],
									"path": [
										"projects",
										"{{project_id}}",
										"members"
									]
								}
							},
							"response": []
						},
						{
							"name": "create project member with all kinds of invalid token",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const iterationData = pm.iterationData",
											"const httpCode = iterationData.get('httpCode')",
											"pm.test(`Status code is ${httpCode}`, function () {",
											"    pm.response.to.have.status(httpCode);",
											"    const response = pm.response.json()",
											"    if (response.message) {",
											"        pm.expect(response.message).to.eq(iterationData.get('message'))",
											"    } else {",
											"        pm.expect(response.result.content.message).to.eq(iterationData.get('message'))",
											"    }",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "{{jwtToken}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"role\": \"copilot\"\n}"
								},
								"url": {
									"raw": "{{URL}}/projects/{{project_id}}/members",
									"host": [
										"{{URL}}"
									],
									"path": [
										"projects",
										"{{project_id}}",
										"members"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "list project members",
					"item": [
						{
							"name": "list project members by admin",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(`Status code is 200`, function () {",
											"    pm.response.to.have.status(200);",
											"    const response = pm.response.json()",
											"    pm.expect(response.length).to.gt(0)",
											"    const iterationData = pm.iterationData",
											"    const expectedFields = iterationData.get('expectedFields')",
											"    for (let item of response) {",
											"        // make sure the list returns the expected fields",
											"        pm.expect(expectedFields.every(r=> Object.keys(item).indexOf(r) >= 0)).to.eq(true)",
											"        if (iterationData.get('role')) {",
											"            _.isEqual(item.role, iterationData.get('role'))",
											"        }",
											"    }",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"value": "Bearer {{admin_token}}",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{URL}}/projects/{{project_id}}/members?{{params}}",
									"host": [
										"{{URL}}"
									],
									"path": [
										"projects",
										"{{project_id}}",
										"members"
									],
									"query": [
										{
											"key": "{{params}}",
											"value": null
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "list project members by m2m",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(`Status code is 200`, function () {",
											"    pm.response.to.have.status(200);",
											"    const response = pm.response.json()",
											"    pm.expect(response.length).to.gt(0)",
											"    const iterationData = pm.iterationData",
											"    const expectedFields = iterationData.get('expectedFields')",
											"    for (let item of response) {",
											"        // make sure the list returns the expected fields",
											"        pm.expect(expectedFields.every(r=> Object.keys(item).indexOf(r) >= 0)).to.eq(true)",
											"        if (iterationData.get('role')) {",
											"            _.isEqual(item.role, iterationData.get('role'))",
											"        }",
											"    }",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{m2m_token}}"
									}
								],
								"url": {
									"raw": "{{URL}}/projects/{{project_id}}/members?{{params}}",
									"host": [
										"{{URL}}"
									],
									"path": [
										"projects",
										"{{project_id}}",
										"members"
									],
									"query": [
										{
											"key": "{{params}}",
											"value": null
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "list project members by copilot",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(`Status code is 200`, function () {",
											"    pm.response.to.have.status(200);",
											"    const response = pm.response.json()",
											"    pm.expect(response.length).to.gt(0)",
											"    const iterationData = pm.iterationData",
											"    const expectedFields = iterationData.get('expectedFields')",
											"    for (let item of response) {",
											"        // make sure the list returns the expected fields",
											"        pm.expect(expectedFields.every(r=> Object.keys(item).indexOf(r) >= 0)).to.eq(true)",
											"        if (iterationData.get('role')) {",
											"            _.isEqual(item.role, iterationData.get('role'))",
											"        }",
											"    }",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{copilot_token}}"
									}
								],
								"url": {
									"raw": "{{URL}}/projects/{{project_id}}/members?{{params}}",
									"host": [
										"{{URL}}"
									],
									"path": [
										"projects",
										"{{project_id}}",
										"members"
									],
									"query": [
										{
											"key": "{{params}}",
											"value": null
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "list project members by user",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(`Status code is 200`, function () {",
											"    pm.response.to.have.status(200);",
											"    const response = pm.response.json()",
											"    pm.expect(response.length).to.gt(0)",
											"    const iterationData = pm.iterationData",
											"    const expectedFields = iterationData.get('expectedFields')",
											"    for (let item of response) {",
											"        // make sure the list returns the expected fields",
											"        pm.expect(expectedFields.every(r=> Object.keys(item).indexOf(r) >= 0)).to.eq(true)",
											"        if (iterationData.get('role')) {",
											"            _.isEqual(item.role, iterationData.get('role'))",
											"        }",
											"    }",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{user_token}}"
									}
								],
								"url": {
									"raw": "{{URL}}/projects/{{project_id}}/members?{{params}}",
									"host": [
										"{{URL}}"
									],
									"path": [
										"projects",
										"{{project_id}}",
										"members"
									],
									"query": [
										{
											"key": "{{params}}",
											"value": null
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "list project members with invalid parameters",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const iterationData = pm.iterationData",
											"const httpCode = iterationData.get('httpCode')",
											"pm.test(`Status code is ${httpCode}`, function () {",
											"    pm.response.to.have.status(httpCode);",
											"    const response = pm.response.json()",
											"    pm.expect(response.message).to.eq(iterationData.get('message'))",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{user_token}}"
									}
								],
								"url": {
									"raw": "{{URL}}/projects/{{project_id}}/members?{{params}}",
									"host": [
										"{{URL}}"
									],
									"path": [
										"projects",
										"{{project_id}}",
										"members"
									],
									"query": [
										{
											"key": "{{params}}",
											"value": null
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "list project members with all kinds of invalid token",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const iterationData = pm.iterationData",
											"const httpCode = iterationData.get('httpCode')",
											"pm.test(`Status code is ${httpCode}`, function () {",
											"    pm.response.to.have.status(httpCode);",
											"    const response = pm.response.json()",
											"    if (response.message) {",
											"        pm.expect(response.message).to.eq(iterationData.get('message'))",
											"    } else {",
											"        pm.expect(response.result.content.message).to.eq(iterationData.get('message'))",
											"    }",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "{{jwtToken}}"
									}
								],
								"url": {
									"raw": "{{URL}}/projects/{{project_id}}/members",
									"host": [
										"{{URL}}"
									],
									"path": [
										"projects",
										"{{project_id}}",
										"members"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "get project member",
					"item": [
						{
							"name": "get project member by admin",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const iterationData = pm.iterationData",
											"const httpCode = iterationData.get('httpCode')",
											"pm.test(`Status code is ${httpCode}`, function () {",
											"    pm.response.to.have.status(httpCode);",
											"    if(httpCode === 200){",
											"        const response = pm.response.json()",
											"        const iterationData = pm.iterationData",
											"        const expected = iterationData.get('expected')",
											"        for (let key of Object.keys(expected)) {",
											"            if (_.isString(expected[key]) && expected[key].startsWith('{')) {",
											"                pm.expect(_.isEqual(response[key], pm.environment.get(expected[key].substr(2, expected[key].length - 4)))).to.eq(true)",
											"            } else {",
											"                pm.expect(_.isEqual(response[key], expected[key])).to.eq(true)",
											"            }",
											"        }",
											"    }",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{admin_token}}"
									}
								],
								"url": {
									"raw": "{{URL}}/projects/{{project_id}}/members/{{id}}",
									"host": [
										"{{URL}}"
									],
									"path": [
										"projects",
										"{{project_id}}",
										"members",
										"{{id}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "get project member by m2m",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const iterationData = pm.iterationData",
											"const httpCode = iterationData.get('httpCode')",
											"pm.test(`Status code is ${httpCode}`, function () {",
											"    pm.response.to.have.status(httpCode);",
											"    if(httpCode === 200){",
											"        const response = pm.response.json()",
											"        const iterationData = pm.iterationData",
											"        const expected = iterationData.get('expected')",
											"        for (let key of Object.keys(expected)) {",
											"            if (_.isString(expected[key]) && expected[key].startsWith('{')) {",
											"                pm.expect(_.isEqual(response[key], pm.environment.get(expected[key].substr(2, expected[key].length - 4)))).to.eq(true)",
											"            } else {",
											"                pm.expect(_.isEqual(response[key], expected[key])).to.eq(true)",
											"            }",
											"        }",
											"    }",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{m2m_token}}"
									}
								],
								"url": {
									"raw": "{{URL}}/projects/{{project_id}}/members/{{id}}",
									"host": [
										"{{URL}}"
									],
									"path": [
										"projects",
										"{{project_id}}",
										"members",
										"{{id}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "get project member by copilot",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const iterationData = pm.iterationData",
											"const httpCode = iterationData.get('httpCode')",
											"pm.test(`Status code is ${httpCode}`, function () {",
											"    pm.response.to.have.status(httpCode);",
											"    if(httpCode === 200){",
											"        const response = pm.response.json()",
											"        const iterationData = pm.iterationData",
											"        const expected = iterationData.get('expected')",
											"        for (let key of Object.keys(expected)) {",
											"            if (_.isString(expected[key]) && expected[key].startsWith('{')) {",
											"                pm.expect(_.isEqual(response[key], pm.environment.get(expected[key].substr(2, expected[key].length - 4)))).to.eq(true)",
											"            } else {",
											"                pm.expect(_.isEqual(response[key], expected[key])).to.eq(true)",
											"            }",
											"        }",
											"    }",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{copilot_token}}"
									}
								],
								"url": {
									"raw": "{{URL}}/projects/{{project_id}}/members/{{id}}",
									"host": [
										"{{URL}}"
									],
									"path": [
										"projects",
										"{{project_id}}",
										"members",
										"{{id}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "get project member by user",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const iterationData = pm.iterationData",
											"const httpCode = iterationData.get('httpCode')",
											"pm.test(`Status code is ${httpCode}`, function () {",
											"    pm.response.to.have.status(httpCode);",
											"    if(httpCode === 200){",
											"        const response = pm.response.json()",
											"        const iterationData = pm.iterationData",
											"        const expected = iterationData.get('expected')",
											"        for (let key of Object.keys(expected)) {",
											"            if (_.isString(expected[key]) && expected[key].startsWith('{')) {",
											"                pm.expect(_.isEqual(response[key], pm.environment.get(expected[key].substr(2, expected[key].length - 4)))).to.eq(true)",
											"            } else {",
											"                pm.expect(_.isEqual(response[key], expected[key])).to.eq(true)",
											"            }",
											"        }",
											"    }",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{user_token}}"
									}
								],
								"url": {
									"raw": "{{URL}}/projects/{{project_id}}/members/{{id}}",
									"host": [
										"{{URL}}"
									],
									"path": [
										"projects",
										"{{project_id}}",
										"members",
										"{{id}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "get project member with invalid requests",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const iterationData = pm.iterationData",
											"const httpCode = iterationData.get('httpCode')",
											"pm.test(`Status code is ${httpCode}`, function () {",
											"    pm.response.to.have.status(httpCode);",
											"    const response = pm.response.json()",
											"    pm.expect(response.message).to.eq(iterationData.get('message'))",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{admin_token}}"
									}
								],
								"url": {
									"raw": "{{URL}}/projects/{{project_id}}/members/{{id}}",
									"host": [
										"{{URL}}"
									],
									"path": [
										"projects",
										"{{project_id}}",
										"members",
										"{{id}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "get project member with all kinds of invalid token",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const iterationData = pm.iterationData",
											"const httpCode = iterationData.get('httpCode')",
											"pm.test(`Status code is ${httpCode}`, function () {",
											"    pm.response.to.have.status(httpCode);",
											"    const response = pm.response.json()",
											"    if (response.message) {",
											"        pm.expect(response.message).to.eq(iterationData.get('message'))",
											"    } else {",
											"        pm.expect(response.result.content.message).to.eq(iterationData.get('message'))",
											"    }",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "{{jwtToken}}"
									}
								],
								"url": {
									"raw": "{{URL}}/projects/{{project_id}}/members/{{id}}",
									"host": [
										"{{URL}}"
									],
									"path": [
										"projects",
										"{{project_id}}",
										"members",
										"{{id}}"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "patch project member",
					"item": [
						{
							"name": "patch project member by admin",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const iterationData = pm.iterationData",
											"const httpCode = iterationData.get('httpCode')",
											"pm.test(`Status code is ${httpCode}`, function () {",
											"    pm.response.to.have.status(httpCode);",
											"    const response = pm.response.json()",
											"    const iterationData = pm.iterationData",
											"    const expected = iterationData.get('expected')",
											"    for (let key of Object.keys(expected)) {",
											"        if (_.isString(expected[key]) && expected[key].startsWith('{')) {",
											"            pm.expect(_.isEqual(response[key], pm.environment.get(expected[key].substr(2, expected[key].length - 4)))).to.eq(true)",
											"        } else {",
											"            pm.expect(_.isEqual(response[key], expected[key])).to.eq(true)",
											"        }",
											"    }",
											"    const expectedFields = iterationData.get('expectedFields')",
											"    if (expectedFields) {",
											"        // make sure the only the expected fields are returned",
											"        pm.expect(Object.keys(response).every(r=> expectedFields.indexOf(r) >= 0)).to.eq(true)",
											"    }",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"var inputJSONdata = pm.iterationData.get(\"input\");",
											"pm.variables.set(\"input_body\",JSON.stringify(inputJSONdata));"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PATCH",
								"header": [
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{admin_token}}"
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{{input_body}}"
								},
								"url": {
									"raw": "{{URL}}/projects/{{project_id}}/members/{{id}}?{{params}}",
									"host": [
										"{{URL}}"
									],
									"path": [
										"projects",
										"{{project_id}}",
										"members",
										"{{id}}"
									],
									"query": [
										{
											"key": "{{params}}",
											"value": null
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "patch project member by m2m",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const iterationData = pm.iterationData",
											"const httpCode = iterationData.get('httpCode')",
											"pm.test(`Status code is ${httpCode}`, function () {",
											"    pm.response.to.have.status(httpCode);",
											"    const response = pm.response.json()",
											"    const iterationData = pm.iterationData",
											"    const expected = iterationData.get('expected')",
											"    for (let key of Object.keys(expected)) {",
											"        if (_.isString(expected[key]) && expected[key].startsWith('{')) {",
											"            pm.expect(_.isEqual(response[key], pm.environment.get(expected[key].substr(2, expected[key].length - 4)))).to.eq(true)",
											"        } else {",
											"            pm.expect(_.isEqual(response[key], expected[key])).to.eq(true)",
											"        }",
											"    }",
											"    const expectedFields = iterationData.get('expectedFields')",
											"    if (expectedFields) {",
											"        // make sure the only the expected fields are returned",
											"        pm.expect(Object.keys(response).every(r=> expectedFields.indexOf(r) >= 0)).to.eq(true)",
											"    }",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"var inputJSONdata = pm.iterationData.get(\"input\");",
											"pm.variables.set(\"input_body\",JSON.stringify(inputJSONdata));"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PATCH",
								"header": [
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{m2m_token}}"
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{{input_body}}"
								},
								"url": {
									"raw": "{{URL}}/projects/{{project_id}}/members/{{id}}?{{params}}",
									"host": [
										"{{URL}}"
									],
									"path": [
										"projects",
										"{{project_id}}",
										"members",
										"{{id}}"
									],
									"query": [
										{
											"key": "{{params}}",
											"value": null
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "patch project member by copilot",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const iterationData = pm.iterationData",
											"const httpCode = iterationData.get('httpCode')",
											"pm.test(`Status code is ${httpCode}`, function () {",
											"    pm.response.to.have.status(httpCode);",
											"    const response = pm.response.json()",
											"    const iterationData = pm.iterationData",
											"    const expected = iterationData.get('expected')",
											"    for (let key of Object.keys(expected)) {",
											"        if (_.isString(expected[key]) && expected[key].startsWith('{')) {",
											"            pm.expect(_.isEqual(response[key], pm.environment.get(expected[key].substr(2, expected[key].length - 4)))).to.eq(true)",
											"        } else {",
											"            pm.expect(_.isEqual(response[key], expected[key])).to.eq(true)",
											"        }",
											"    }",
											"    const expectedFields = iterationData.get('expectedFields')",
											"    if (expectedFields) {",
											"        // make sure the only the expected fields are returned",
											"        pm.expect(Object.keys(response).every(r=> expectedFields.indexOf(r) >= 0)).to.eq(true)",
											"    }",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"var inputJSONdata = pm.iterationData.get(\"input\");",
											"pm.variables.set(\"input_body\",JSON.stringify(inputJSONdata));"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PATCH",
								"header": [
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{copilot_token}}"
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{{input_body}}"
								},
								"url": {
									"raw": "{{URL}}/projects/{{project_id}}/members/{{id}}?{{params}}",
									"host": [
										"{{URL}}"
									],
									"path": [
										"projects",
										"{{project_id}}",
										"members",
										"{{id}}"
									],
									"query": [
										{
											"key": "{{params}}",
											"value": null
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "patch project member with all kinds of invalid request body",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const iterationData = pm.iterationData",
											"const httpCode = iterationData.get('httpCode')",
											"pm.test(`Status code is ${httpCode}`, function () {",
											"    pm.response.to.have.status(httpCode);",
											"    const response = pm.response.json()",
											"    pm.expect(response.message).to.eq(iterationData.get('message'))",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"var inputJSONdata = pm.iterationData.get(\"input\");",
											"pm.variables.set(\"input_body\",JSON.stringify(inputJSONdata));"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PATCH",
								"header": [
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{admin_token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{{input_body}}"
								},
								"url": {
									"raw": "{{URL}}/projects/{{project_id}}/members/{{id}}",
									"host": [
										"{{URL}}"
									],
									"path": [
										"projects",
										"{{project_id}}",
										"members",
										"{{id}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "patch project member with all kinds of invalid token",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const iterationData = pm.iterationData",
											"const httpCode = iterationData.get('httpCode')",
											"pm.test(`Status code is ${httpCode}`, function () {",
											"    pm.response.to.have.status(httpCode);",
											"    const response = pm.response.json()",
											"    if (response.message) {",
											"        pm.expect(response.message).to.eq(iterationData.get('message'))",
											"    } else {",
											"        pm.expect(response.result.content.message).to.eq(iterationData.get('message'))",
											"    }",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PATCH",
								"header": [
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "{{jwtToken}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"role\": \"customer\"\n}"
								},
								"url": {
									"raw": "{{URL}}/projects/{{project_id}}/members/{{id}}",
									"host": [
										"{{URL}}"
									],
									"path": [
										"projects",
										"{{project_id}}",
										"members",
										"{{id}}"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "delete project member",
					"item": [
						{
							"name": "delete project member by admin",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(`Status code is 204`, function () {",
											"    pm.response.to.have.status(204)",
											"    const response = pm.response.text()",
											"    pm.expect(response).to.eq('')",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{admin_token}}"
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"url": {
									"raw": "{{URL}}/projects/{{project_id}}/members/{{id}}",
									"host": [
										"{{URL}}"
									],
									"path": [
										"projects",
										"{{project_id}}",
										"members",
										"{{id}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "delete project member by m2m",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(`Status code is 204`, function () {",
											"    pm.response.to.have.status(204)",
											"    const response = pm.response.text()",
											"    pm.expect(response).to.eq('')",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{m2m_token}}"
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"url": {
									"raw": "{{URL}}/projects/{{project_id}}/members/{{id}}",
									"host": [
										"{{URL}}"
									],
									"path": [
										"projects",
										"{{project_id}}",
										"members",
										"{{id}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "delete project member with all kinds of invalid request",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const iterationData = pm.iterationData",
											"const httpCode = iterationData.get('httpCode')",
											"pm.test(`Status code is ${httpCode}`, function () {",
											"    pm.response.to.have.status(httpCode);",
											"    const response = pm.response.json()",
											"    if (response.message) {",
											"        pm.expect(response.message).to.contains(iterationData.get('message'))",
											"    } else {",
											"        pm.expect(response.result.content.message).to.eq(iterationData.get('message'))",
											"    }",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "{{jwtToken}}"
									}
								],
								"url": {
									"raw": "{{URL}}/projects/{{project_id}}/members/{{id}}",
									"host": [
										"{{URL}}"
									],
									"path": [
										"projects",
										"{{project_id}}",
										"members",
										"{{id}}"
									]
								}
							},
							"response": []
						}
					]
				}
			]
		},
		{
			"name": "Project Phase",
			"item": [
				{
					"name": "create project phase",
					"item": [
						{
							"name": "create project phase by admin",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const iterationData = pm.iterationData",
											"const httpCode = iterationData.get('httpCode')",
											"pm.test(`Status code is ${httpCode}`, function () {",
											"    pm.response.to.have.status(httpCode);",
											"    const response = pm.response.json()",
											"    const iterationData = pm.iterationData",
											"    const expected = iterationData.get('expected')",
											"    for (let key of Object.keys(expected)) {",
											"        if (_.isString(expected[key]) && expected[key].startsWith('{')) {",
											"            pm.expect(_.isEqual(response[key], pm.environment.get(expected[key].substr(2, expected[key].length - 4)))).to.eq(true)",
											"        } else {",
											"            pm.expect(_.isEqual(response[key], expected[key])).to.eq(true)",
											"        }",
											"    }",
											"    if (iterationData.get('idLabel')) {",
											"        const idLabel = iterationData.get('idLabel')",
											"        pm.environment.set(idLabel, response.id)",
											"    }",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"var inputJSONdata = pm.iterationData.get(\"input\");",
											"pm.variables.set(\"input_body\",JSON.stringify(inputJSONdata));"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{admin_token}}"
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{{input_body}}"
								},
								"url": {
									"raw": "{{URL}}/projects/{{project_id}}/phases",
									"host": [
										"{{URL}}"
									],
									"path": [
										"projects",
										"{{project_id}}",
										"phases"
									]
								}
							},
							"response": []
						},
						{
							"name": "create project phase by copilot",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const iterationData = pm.iterationData",
											"const httpCode = iterationData.get('httpCode')",
											"pm.test(`Status code is ${httpCode}`, function () {",
											"    pm.response.to.have.status(httpCode);",
											"    const response = pm.response.json()",
											"    const iterationData = pm.iterationData",
											"    const expected = iterationData.get('expected')",
											"    for (let key of Object.keys(expected)) {",
											"        if (_.isString(expected[key]) && expected[key].startsWith('{')) {",
											"            pm.expect(_.isEqual(response[key], pm.environment.get(expected[key].substr(2, expected[key].length - 4)))).to.eq(true)",
											"        } else {",
											"            pm.expect(_.isEqual(response[key], expected[key])).to.eq(true)",
											"        }",
											"    }",
											"    if (iterationData.get('idLabel')) {",
											"        const idLabel = iterationData.get('idLabel')",
											"        pm.environment.set(idLabel, response.id)",
											"    }",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"var inputJSONdata = pm.iterationData.get(\"input\");",
											"pm.variables.set(\"input_body\",JSON.stringify(inputJSONdata));"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{admin_token}}"
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{{input_body}}"
								},
								"url": {
									"raw": "{{URL}}/projects/{{project_id}}/phases",
									"host": [
										"{{URL}}"
									],
									"path": [
										"projects",
										"{{project_id}}",
										"phases"
									]
								}
							},
							"response": []
						},
						{
							"name": "create project phase with all kinds of invalid request body",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const iterationData = pm.iterationData",
											"const httpCode = iterationData.get('httpCode')",
											"pm.test(`Status code is ${httpCode}`, function () {",
											"    pm.response.to.have.status(httpCode);",
											"    const response = pm.response.json()",
											"    pm.expect(response.message).to.eq(iterationData.get('message'))",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"var inputJSONdata = pm.iterationData.get(\"input\");",
											"pm.variables.set(\"input_body\",JSON.stringify(inputJSONdata));"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{admin_token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{{input_body}}"
								},
								"url": {
									"raw": "{{URL}}/projects/{{project_id}}/phases",
									"host": [
										"{{URL}}"
									],
									"path": [
										"projects",
										"{{project_id}}",
										"phases"
									]
								}
							},
							"response": []
						},
						{
							"name": "create project phase with all kinds of invalid token",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const iterationData = pm.iterationData",
											"const httpCode = iterationData.get('httpCode')",
											"pm.test(`Status code is ${httpCode}`, function () {",
											"    pm.response.to.have.status(httpCode);",
											"    const response = pm.response.json()",
											"    if (response.message) {",
											"        pm.expect(response.message).to.eq(iterationData.get('message'))",
											"    } else {",
											"        pm.expect(response.result.content.message).to.eq(iterationData.get('message'))",
											"    }",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "{{jwtToken}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"name\": \"POSTMANE2E-Project-Phase-by-admin-with-description\",\n\t\"status\": \"active\"\n}"
								},
								"url": {
									"raw": "{{URL}}/projects/{{project_id}}/phases",
									"host": [
										"{{URL}}"
									],
									"path": [
										"projects",
										"{{project_id}}",
										"phases"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "list project phases",
					"item": [
						{
							"name": "list project phases by admin",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(`Status code is 200`, function () {",
											"    pm.response.to.have.status(200);",
											"    const response = pm.response.json()",
											"    pm.expect(response.length).to.gt(0)",
											"    const iterationData = pm.iterationData",
											"    const expectedFields = iterationData.get('expectedFields')",
											"    for (let item of response) {",
											"        // make sure the list returns the expected fields",
											"        pm.expect(expectedFields.every(r=> Object.keys(item).indexOf(r) >= 0)).to.eq(true)",
											"        if (iterationData.get('limitedFields')) {",
											"            _.isEqual(iterationData.get('limitedFields'), Object.keys(item))",
											"        }",
											"    }",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"value": "Bearer {{admin_token}}",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{URL}}/projects/{{project_id}}/phases?{{params}}",
									"host": [
										"{{URL}}"
									],
									"path": [
										"projects",
										"{{project_id}}",
										"phases"
									],
									"query": [
										{
											"key": "{{params}}",
											"value": null
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "list project phases by m2m",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(`Status code is 200`, function () {",
											"    pm.response.to.have.status(200);",
											"    const response = pm.response.json()",
											"    pm.expect(response.length).to.gt(0)",
											"    const iterationData = pm.iterationData",
											"    const expectedFields = iterationData.get('expectedFields')",
											"    for (let item of response) {",
											"        // make sure the list returns the expected fields",
											"        pm.expect(expectedFields.every(r=> Object.keys(item).indexOf(r) >= 0)).to.eq(true)",
											"        if (iterationData.get('limitedFields')) {",
											"            _.isEqual(iterationData.get('limitedFields'), Object.keys(item))",
											"        }",
											"    }",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{m2m_token}}"
									}
								],
								"url": {
									"raw": "{{URL}}/projects/{{project_id}}/phases?{{params}}",
									"host": [
										"{{URL}}"
									],
									"path": [
										"projects",
										"{{project_id}}",
										"phases"
									],
									"query": [
										{
											"key": "{{params}}",
											"value": null
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "list project phases by copilot",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(`Status code is 200`, function () {",
											"    pm.response.to.have.status(200);",
											"    const response = pm.response.json()",
											"    pm.expect(response.length).to.gt(0)",
											"    const iterationData = pm.iterationData",
											"    const expectedFields = iterationData.get('expectedFields')",
											"    for (let item of response) {",
											"        // make sure the list returns the expected fields",
											"        pm.expect(expectedFields.every(r=> Object.keys(item).indexOf(r) >= 0)).to.eq(true)",
											"        if (iterationData.get('limitedFields')) {",
											"            _.isEqual(iterationData.get('limitedFields'), Object.keys(item))",
											"        }",
											"    }",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{copilot_token}}"
									}
								],
								"url": {
									"raw": "{{URL}}/projects/{{project_id}}/phases?{{params}}",
									"host": [
										"{{URL}}"
									],
									"path": [
										"projects",
										"{{project_id}}",
										"phases"
									],
									"query": [
										{
											"key": "{{params}}",
											"value": null
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "list project phases by user",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(`Status code is 200`, function () {",
											"    pm.response.to.have.status(200);",
											"    const response = pm.response.json()",
											"    pm.expect(response.length).to.gt(0)",
											"    const iterationData = pm.iterationData",
											"    const expectedFields = iterationData.get('expectedFields')",
											"    for (let item of response) {",
											"        // make sure the list returns the expected fields",
											"        pm.expect(expectedFields.every(r=> Object.keys(item).indexOf(r) >= 0)).to.eq(true)",
											"        if (iterationData.get('limitedFields')) {",
											"            _.isEqual(iterationData.get('limitedFields'), Object.keys(item))",
											"        }",
											"    }",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{user_token}}"
									}
								],
								"url": {
									"raw": "{{URL}}/projects/{{project_id}}/phases?{{params}}",
									"host": [
										"{{URL}}"
									],
									"path": [
										"projects",
										"{{project_id}}",
										"phases"
									],
									"query": [
										{
											"key": "{{params}}",
											"value": null
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "list project phases with all kinds of invalid data",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const iterationData = pm.iterationData",
											"const httpCode = iterationData.get('httpCode')",
											"pm.test(`Status code is ${httpCode}`, function () {",
											"    pm.response.to.have.status(httpCode);",
											"    const response = pm.response.json()",
											"    if (response.message) {",
											"        pm.expect(response.message).to.eq(iterationData.get('message'))",
											"    } else {",
											"        pm.expect(response.result.content.message).to.eq(iterationData.get('message'))",
											"    }",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{admin_token}}"
									}
								],
								"url": {
									"raw": "{{URL}}/projects/{{project_id}}/phases",
									"host": [
										"{{URL}}"
									],
									"path": [
										"projects",
										"{{project_id}}",
										"phases"
									]
								}
							},
							"response": []
						},
						{
							"name": "list project phases with all kinds of invalid token",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const iterationData = pm.iterationData",
											"const httpCode = iterationData.get('httpCode')",
											"pm.test(`Status code is ${httpCode}`, function () {",
											"    pm.response.to.have.status(httpCode);",
											"    const response = pm.response.json()",
											"    if (response.message) {",
											"        pm.expect(response.message).to.eq(iterationData.get('message'))",
											"    } else {",
											"        pm.expect(response.result.content.message).to.eq(iterationData.get('message'))",
											"    }",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "{{jwtToken}}"
									}
								],
								"url": {
									"raw": "{{URL}}/projects/{{project_id}}/phases",
									"host": [
										"{{URL}}"
									],
									"path": [
										"projects",
										"{{project_id}}",
										"phases"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "get project phase",
					"item": [
						{
							"name": "get project phase by admin",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const iterationData = pm.iterationData",
											"const httpCode = iterationData.get('httpCode')",
											"pm.test(`Status code is ${httpCode}`, function () {",
											"    pm.response.to.have.status(httpCode);",
											"    if(httpCode === 200){",
											"        const response = pm.response.json()",
											"        const iterationData = pm.iterationData",
											"        const expected = iterationData.get('expected')",
											"        for (let key of Object.keys(expected)) {",
											"            if (_.isString(expected[key]) && expected[key].startsWith('{')) {",
											"                pm.expect(_.isEqual(response[key], pm.environment.get(expected[key].substr(2, expected[key].length - 4)))).to.eq(true)",
											"            } else {",
											"                pm.expect(_.isEqual(response[key], expected[key])).to.eq(true)",
											"            }",
											"        }",
											"    }",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{admin_token}}"
									}
								],
								"url": {
									"raw": "{{URL}}/projects/{{project_id}}/phases/{{id}}",
									"host": [
										"{{URL}}"
									],
									"path": [
										"projects",
										"{{project_id}}",
										"phases",
										"{{id}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "get project phase by m2m",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const iterationData = pm.iterationData",
											"const httpCode = iterationData.get('httpCode')",
											"pm.test(`Status code is ${httpCode}`, function () {",
											"    pm.response.to.have.status(httpCode);",
											"    if(httpCode === 200){",
											"        const response = pm.response.json()",
											"        const iterationData = pm.iterationData",
											"        const expected = iterationData.get('expected')",
											"        for (let key of Object.keys(expected)) {",
											"            if (_.isString(expected[key]) && expected[key].startsWith('{')) {",
											"                pm.expect(_.isEqual(response[key], pm.environment.get(expected[key].substr(2, expected[key].length - 4)))).to.eq(true)",
											"            } else {",
											"                pm.expect(_.isEqual(response[key], expected[key])).to.eq(true)",
											"            }",
											"        }",
											"    }",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{m2m_token}}"
									}
								],
								"url": {
									"raw": "{{URL}}/projects/{{project_id}}/phases/{{id}}",
									"host": [
										"{{URL}}"
									],
									"path": [
										"projects",
										"{{project_id}}",
										"phases",
										"{{id}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "get project phase by copilot",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const iterationData = pm.iterationData",
											"const httpCode = iterationData.get('httpCode')",
											"pm.test(`Status code is ${httpCode}`, function () {",
											"    pm.response.to.have.status(httpCode);",
											"    if(httpCode === 200){",
											"        const response = pm.response.json()",
											"        const iterationData = pm.iterationData",
											"        const expected = iterationData.get('expected')",
											"        for (let key of Object.keys(expected)) {",
											"            if (_.isString(expected[key]) && expected[key].startsWith('{')) {",
											"                pm.expect(_.isEqual(response[key], pm.environment.get(expected[key].substr(2, expected[key].length - 4)))).to.eq(true)",
											"            } else {",
											"                pm.expect(_.isEqual(response[key], expected[key])).to.eq(true)",
											"            }",
											"        }",
											"    }",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{copilot_token}}"
									}
								],
								"url": {
									"raw": "{{URL}}/projects/{{project_id}}/phases/{{id}}",
									"host": [
										"{{URL}}"
									],
									"path": [
										"projects",
										"{{project_id}}",
										"phases",
										"{{id}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "get project phase by user",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const iterationData = pm.iterationData",
											"const httpCode = iterationData.get('httpCode')",
											"pm.test(`Status code is ${httpCode}`, function () {",
											"    pm.response.to.have.status(httpCode);",
											"    if(httpCode === 200){",
											"        const response = pm.response.json()",
											"        const iterationData = pm.iterationData",
											"        const expected = iterationData.get('expected')",
											"        for (let key of Object.keys(expected)) {",
											"            if (_.isString(expected[key]) && expected[key].startsWith('{')) {",
											"                pm.expect(_.isEqual(response[key], pm.environment.get(expected[key].substr(2, expected[key].length - 4)))).to.eq(true)",
											"            } else {",
											"                pm.expect(_.isEqual(response[key], expected[key])).to.eq(true)",
											"            }",
											"        }",
											"    }",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{user_token}}"
									}
								],
								"url": {
									"raw": "{{URL}}/projects/{{project_id}}/phases/{{id}}",
									"host": [
										"{{URL}}"
									],
									"path": [
										"projects",
										"{{project_id}}",
										"phases",
										"{{id}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "get project phase with invalid requests",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const iterationData = pm.iterationData",
											"const httpCode = iterationData.get('httpCode')",
											"pm.test(`Status code is ${httpCode}`, function () {",
											"    pm.response.to.have.status(httpCode);",
											"    const response = pm.response.json()",
											"    pm.expect(response.message).to.eq(iterationData.get('message'))",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{admin_token}}"
									}
								],
								"url": {
									"raw": "{{URL}}/projects/{{project_id}}/phases/{{id}}",
									"host": [
										"{{URL}}"
									],
									"path": [
										"projects",
										"{{project_id}}",
										"phases",
										"{{id}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "get project phase with all kinds of invalid token",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const iterationData = pm.iterationData",
											"const httpCode = iterationData.get('httpCode')",
											"pm.test(`Status code is ${httpCode}`, function () {",
											"    pm.response.to.have.status(httpCode);",
											"    const response = pm.response.json()",
											"    if (response.message) {",
											"        pm.expect(response.message).to.eq(iterationData.get('message'))",
											"    } else {",
											"        pm.expect(response.result.content.message).to.eq(iterationData.get('message'))",
											"    }",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "{{jwtToken}}"
									}
								],
								"url": {
									"raw": "{{URL}}/projects/{{project_id}}/phases/{{id}}",
									"host": [
										"{{URL}}"
									],
									"path": [
										"projects",
										"{{project_id}}",
										"phases",
										"{{id}}"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "patch project phase",
					"item": [
						{
							"name": "patch project phase by admin",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const iterationData = pm.iterationData",
											"const httpCode = iterationData.get('httpCode')",
											"pm.test(`Status code is ${httpCode}`, function () {",
											"    pm.response.to.have.status(httpCode);",
											"    const response = pm.response.json()",
											"    const iterationData = pm.iterationData",
											"    const expected = iterationData.get('expected')",
											"    for (let key of Object.keys(expected)) {",
											"        if (_.isString(expected[key]) && expected[key].startsWith('{')) {",
											"            pm.expect(_.isEqual(response[key], pm.environment.get(expected[key].substr(2, expected[key].length - 4)))).to.eq(true)",
											"        } else {",
											"            pm.expect(_.isEqual(response[key], expected[key])).to.eq(true)",
											"        }",
											"    }",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"var inputJSONdata = pm.iterationData.get(\"input\");",
											"pm.variables.set(\"input_body\",JSON.stringify(inputJSONdata));"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PATCH",
								"header": [
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{admin_token}}"
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{{input_body}}"
								},
								"url": {
									"raw": "{{URL}}/projects/{{project_id}}/phases/{{id}}",
									"host": [
										"{{URL}}"
									],
									"path": [
										"projects",
										"{{project_id}}",
										"phases",
										"{{id}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "patch project phase by copilot",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const iterationData = pm.iterationData",
											"const httpCode = iterationData.get('httpCode')",
											"pm.test(`Status code is ${httpCode}`, function () {",
											"    pm.response.to.have.status(httpCode);",
											"    const response = pm.response.json()",
											"    const iterationData = pm.iterationData",
											"    const expected = iterationData.get('expected')",
											"    for (let key of Object.keys(expected)) {",
											"        if (_.isString(expected[key]) && expected[key].startsWith('{')) {",
											"            pm.expect(_.isEqual(response[key], pm.environment.get(expected[key].substr(2, expected[key].length - 4)))).to.eq(true)",
											"        } else {",
											"            pm.expect(_.isEqual(response[key], expected[key])).to.eq(true)",
											"        }",
											"    }",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"var inputJSONdata = pm.iterationData.get(\"input\");",
											"pm.variables.set(\"input_body\",JSON.stringify(inputJSONdata));"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PATCH",
								"header": [
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{admin_token}}"
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{{input_body}}"
								},
								"url": {
									"raw": "{{URL}}/projects/{{project_id}}/phases/{{id}}",
									"host": [
										"{{URL}}"
									],
									"path": [
										"projects",
										"{{project_id}}",
										"phases",
										"{{id}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "patch project phase with all kinds of invalid request body",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const iterationData = pm.iterationData",
											"const httpCode = iterationData.get('httpCode')",
											"pm.test(`Status code is ${httpCode}`, function () {",
											"    pm.response.to.have.status(httpCode);",
											"    const response = pm.response.json()",
											"    pm.expect(response.message).to.eq(iterationData.get('message'))",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"var inputJSONdata = pm.iterationData.get(\"input\");",
											"pm.variables.set(\"input_body\",JSON.stringify(inputJSONdata));"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PATCH",
								"header": [
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{admin_token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{{input_body}}"
								},
								"url": {
									"raw": "{{URL}}/projects/{{project_id}}/phases/{{id}}",
									"host": [
										"{{URL}}"
									],
									"path": [
										"projects",
										"{{project_id}}",
										"phases",
										"{{id}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "patch project phase with all kinds of invalid token",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const iterationData = pm.iterationData",
											"const httpCode = iterationData.get('httpCode')",
											"pm.test(`Status code is ${httpCode}`, function () {",
											"    pm.response.to.have.status(httpCode);",
											"    const response = pm.response.json()",
											"    if (response.message) {",
											"        pm.expect(response.message).to.eq(iterationData.get('message'))",
											"    } else {",
											"        pm.expect(response.result.content.message).to.eq(iterationData.get('message'))",
											"    }",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PATCH",
								"header": [
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "{{jwtToken}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"details\": [\"check check\"]\n}"
								},
								"url": {
									"raw": "{{URL}}/projects/{{project_id}}/phases/{{id}}",
									"host": [
										"{{URL}}"
									],
									"path": [
										"projects",
										"{{project_id}}",
										"phases",
										"{{id}}"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "delete project phase",
					"item": [
						{
							"name": "delete project phase by admin",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(`Status code is 204`, function () {",
											"    pm.response.to.have.status(204)",
											"    const response = pm.response.text()",
											"    pm.expect(response).to.eq('')",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{admin_token}}"
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"url": {
									"raw": "{{URL}}/projects/{{project_id}}/phases/{{id}}",
									"host": [
										"{{URL}}"
									],
									"path": [
										"projects",
										"{{project_id}}",
										"phases",
										"{{id}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "delete project phase by copilot",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(`Status code is 204`, function () {",
											"    pm.response.to.have.status(204)",
											"    const response = pm.response.text()",
											"    pm.expect(response).to.eq('')",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{admin_token}}"
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"url": {
									"raw": "{{URL}}/projects/{{project_id}}/phases/{{id}}",
									"host": [
										"{{URL}}"
									],
									"path": [
										"projects",
										"{{project_id}}",
										"phases",
										"{{id}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "delete project phase with all kinds of invalid request",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const iterationData = pm.iterationData",
											"const httpCode = iterationData.get('httpCode')",
											"pm.test(`Status code is ${httpCode}`, function () {",
											"    pm.response.to.have.status(httpCode);",
											"    const response = pm.response.json()",
											"    if (response.message) {",
											"        pm.expect(response.message).to.contains(iterationData.get('message'))",
											"    } else {",
											"        pm.expect(response.result.content.message).to.eq(iterationData.get('message'))",
											"    }",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "{{jwtToken}}"
									}
								],
								"url": {
									"raw": "{{URL}}/projects/{{project_id}}/phases/{{id}}",
									"host": [
										"{{URL}}"
									],
									"path": [
										"projects",
										"{{project_id}}",
										"phases",
										"{{id}}"
									]
								}
							},
							"response": []
						}
					]
				}
			]
		},
		{
			"name": "Workstream",
			"item": [
				{
					"name": "create project workstream",
					"item": [
						{
							"name": "create project workstream by admin",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const iterationData = pm.iterationData",
											"const httpCode = iterationData.get('httpCode')",
											"pm.test(`Status code is ${httpCode}`, function () {",
											"    pm.response.to.have.status(httpCode);",
											"    const response = pm.response.json()",
											"    const iterationData = pm.iterationData",
											"    const expected = iterationData.get('expected')",
											"    for (let key of Object.keys(expected)) {",
											"        if (_.isString(expected[key]) && expected[key].startsWith('{')) {",
											"            pm.expect(_.isEqual(response[key], pm.environment.get(expected[key].substr(2, expected[key].length - 4)))).to.eq(true)",
											"        } else {",
											"            pm.expect(_.isEqual(response[key], expected[key])).to.eq(true)",
											"        }",
											"    }",
											"    if (iterationData.get('idLabel')) {",
											"        const idLabel = iterationData.get('idLabel')",
											"        pm.environment.set(idLabel, response.id)",
											"    }",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"var inputJSONdata = pm.iterationData.get(\"input\");",
											"pm.variables.set(\"input_body\",JSON.stringify(inputJSONdata));"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{admin_token}}"
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{{input_body}}"
								},
								"url": {
									"raw": "{{URL}}/projects/{{project_id}}/workstreams",
									"host": [
										"{{URL}}"
									],
									"path": [
										"projects",
										"{{project_id}}",
										"workstreams"
									]
								}
							},
							"response": []
						},
						{
							"name": "create project workstream by m2m",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const iterationData = pm.iterationData",
											"const httpCode = iterationData.get('httpCode')",
											"pm.test(`Status code is ${httpCode}`, function () {",
											"    pm.response.to.have.status(httpCode);",
											"    const response = pm.response.json()",
											"    const iterationData = pm.iterationData",
											"    const expected = iterationData.get('expected')",
											"    for (let key of Object.keys(expected)) {",
											"        if (_.isString(expected[key]) && expected[key].startsWith('{')) {",
											"            pm.expect(_.isEqual(response[key], pm.environment.get(expected[key].substr(2, expected[key].length - 4)))).to.eq(true)",
											"        } else {",
											"            pm.expect(_.isEqual(response[key], expected[key])).to.eq(true)",
											"        }",
											"    }",
											"    if (iterationData.get('idLabel')) {",
											"        const idLabel = iterationData.get('idLabel')",
											"        pm.environment.set(idLabel, response.id)",
											"    }",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"var inputJSONdata = pm.iterationData.get(\"input\");",
											"pm.variables.set(\"input_body\",JSON.stringify(inputJSONdata));"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{m2m_token}}"
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{{input_body}}"
								},
								"url": {
									"raw": "{{URL}}/projects/{{project_id}}/workstreams",
									"host": [
										"{{URL}}"
									],
									"path": [
										"projects",
										"{{project_id}}",
										"workstreams"
									]
								}
							},
							"response": []
						},
						{
							"name": "create project workstream with all kinds of invalid request body",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const iterationData = pm.iterationData",
											"const httpCode = iterationData.get('httpCode')",
											"pm.test(`Status code is ${httpCode}`, function () {",
											"    pm.response.to.have.status(httpCode);",
											"    const response = pm.response.json()",
											"    pm.expect(response.message).to.eq(iterationData.get('message'))",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"var inputJSONdata = pm.iterationData.get(\"input\");",
											"pm.variables.set(\"input_body\",JSON.stringify(inputJSONdata));"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{admin_token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{{input_body}}"
								},
								"url": {
									"raw": "{{URL}}/projects/{{project_id}}/workstreams",
									"host": [
										"{{URL}}"
									],
									"path": [
										"projects",
										"{{project_id}}",
										"workstreams"
									]
								}
							},
							"response": []
						},
						{
							"name": "create project workstream with all kinds of invalid token",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const iterationData = pm.iterationData",
											"const httpCode = iterationData.get('httpCode')",
											"pm.test(`Status code is ${httpCode}`, function () {",
											"    pm.response.to.have.status(httpCode);",
											"    const response = pm.response.json()",
											"    if (response.message) {",
											"        pm.expect(response.message).to.eq(iterationData.get('message'))",
											"    } else {",
											"        pm.expect(response.result.content.message).to.eq(iterationData.get('message'))",
											"    }",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "{{jwtToken}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n      \"name\": \"POSTMANE2E-Project-Workstream-valid\",\n      \"type\": \"postman test type 3\",\n      \"status\": \"reviewed\"\n}"
								},
								"url": {
									"raw": "{{URL}}/projects/{{project_id}}/workstreams",
									"host": [
										"{{URL}}"
									],
									"path": [
										"projects",
										"{{project_id}}",
										"workstreams"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "list project workstreams",
					"item": [
						{
							"name": "list project workstreams by admin",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(`Status code is 200`, function () {",
											"    pm.response.to.have.status(200);",
											"    const response = pm.response.json()",
											"    pm.expect(response.length).to.gt(0)",
											"    const iterationData = pm.iterationData",
											"    const expectedFields = iterationData.get('expectedFields')",
											"    for (let item of response) {",
											"        // make sure the list returns the expected fields",
											"        pm.expect(expectedFields.every(r=> Object.keys(item).indexOf(r) >= 0)).to.eq(true)",
											"        if (iterationData.get('limitedFields')) {",
											"            _.isEqual(iterationData.get('limitedFields'), Object.keys(item))",
											"        }",
											"    }",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"value": "Bearer {{admin_token}}",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{URL}}/projects/{{project_id}}/workstreams?{{params}}",
									"host": [
										"{{URL}}"
									],
									"path": [
										"projects",
										"{{project_id}}",
										"workstreams"
									],
									"query": [
										{
											"key": "{{params}}",
											"value": null
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "list project workstreams by m2m",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(`Status code is 200`, function () {",
											"    pm.response.to.have.status(200);",
											"    const response = pm.response.json()",
											"    pm.expect(response.length).to.gt(0)",
											"    const iterationData = pm.iterationData",
											"    const expectedFields = iterationData.get('expectedFields')",
											"    for (let item of response) {",
											"        // make sure the list returns the expected fields",
											"        pm.expect(expectedFields.every(r=> Object.keys(item).indexOf(r) >= 0)).to.eq(true)",
											"        if (iterationData.get('limitedFields')) {",
											"            _.isEqual(iterationData.get('limitedFields'), Object.keys(item))",
											"        }",
											"    }",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{m2m_token}}"
									}
								],
								"url": {
									"raw": "{{URL}}/projects/{{project_id}}/workstreams?{{params}}",
									"host": [
										"{{URL}}"
									],
									"path": [
										"projects",
										"{{project_id}}",
										"workstreams"
									],
									"query": [
										{
											"key": "{{params}}",
											"value": null
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "list project workstreams by user",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(`Status code is 200`, function () {",
											"    pm.response.to.have.status(200);",
											"    const response = pm.response.json()",
											"    pm.expect(response.length).to.gt(0)",
											"    const iterationData = pm.iterationData",
											"    const expectedFields = iterationData.get('expectedFields')",
											"    for (let item of response) {",
											"        // make sure the list returns the expected fields",
											"        pm.expect(expectedFields.every(r=> Object.keys(item).indexOf(r) >= 0)).to.eq(true)",
											"        if (iterationData.get('limitedFields')) {",
											"            _.isEqual(iterationData.get('limitedFields'), Object.keys(item))",
											"        }",
											"    }",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{user_token}}"
									}
								],
								"url": {
									"raw": "{{URL}}/projects/{{project_id}}/workstreams?{{params}}",
									"host": [
										"{{URL}}"
									],
									"path": [
										"projects",
										"{{project_id}}",
										"workstreams"
									],
									"query": [
										{
											"key": "{{params}}",
											"value": null
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "list project workstreams with all kinds of invalid data",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const iterationData = pm.iterationData",
											"const httpCode = iterationData.get('httpCode')",
											"pm.test(`Status code is ${httpCode}`, function () {",
											"    pm.response.to.have.status(httpCode);",
											"    const response = pm.response.json()",
											"    if (response.message) {",
											"        pm.expect(response.message).to.eq(iterationData.get('message'))",
											"    } else {",
											"        pm.expect(response.result.content.message).to.eq(iterationData.get('message'))",
											"    }",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{admin_token}}"
									}
								],
								"url": {
									"raw": "{{URL}}/projects/{{project_id}}/workstreams",
									"host": [
										"{{URL}}"
									],
									"path": [
										"projects",
										"{{project_id}}",
										"workstreams"
									]
								}
							},
							"response": []
						},
						{
							"name": "list project workstreams with all kinds of invalid token",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const iterationData = pm.iterationData",
											"const httpCode = iterationData.get('httpCode')",
											"pm.test(`Status code is ${httpCode}`, function () {",
											"    pm.response.to.have.status(httpCode);",
											"    const response = pm.response.json()",
											"    if (response.message) {",
											"        pm.expect(response.message).to.eq(iterationData.get('message'))",
											"    } else {",
											"        pm.expect(response.result.content.message).to.eq(iterationData.get('message'))",
											"    }",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "{{jwtToken}}"
									}
								],
								"url": {
									"raw": "{{URL}}/projects/{{project_id}}/workstreams",
									"host": [
										"{{URL}}"
									],
									"path": [
										"projects",
										"{{project_id}}",
										"workstreams"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "get project workstream",
					"item": [
						{
							"name": "get project workstream by admin",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const iterationData = pm.iterationData",
											"const httpCode = iterationData.get('httpCode')",
											"pm.test(`Status code is ${httpCode}`, function () {",
											"    pm.response.to.have.status(httpCode);",
											"    if(httpCode === 200){",
											"        const response = pm.response.json()",
											"        const iterationData = pm.iterationData",
											"        const expected = iterationData.get('expected')",
											"        for (let key of Object.keys(expected)) {",
											"            if (_.isString(expected[key]) && expected[key].startsWith('{')) {",
											"                pm.expect(_.isEqual(response[key], pm.environment.get(expected[key].substr(2, expected[key].length - 4)))).to.eq(true)",
											"            } else {",
											"                pm.expect(_.isEqual(response[key], expected[key])).to.eq(true)",
											"            }",
											"        }",
											"    }",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{admin_token}}"
									}
								],
								"url": {
									"raw": "{{URL}}/projects/{{project_id}}/workstreams/{{id}}",
									"host": [
										"{{URL}}"
									],
									"path": [
										"projects",
										"{{project_id}}",
										"workstreams",
										"{{id}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "get project workstream by m2m",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const iterationData = pm.iterationData",
											"const httpCode = iterationData.get('httpCode')",
											"pm.test(`Status code is ${httpCode}`, function () {",
											"    pm.response.to.have.status(httpCode);",
											"    if(httpCode === 200){",
											"        const response = pm.response.json()",
											"        const iterationData = pm.iterationData",
											"        const expected = iterationData.get('expected')",
											"        for (let key of Object.keys(expected)) {",
											"            if (_.isString(expected[key]) && expected[key].startsWith('{')) {",
											"                pm.expect(_.isEqual(response[key], pm.environment.get(expected[key].substr(2, expected[key].length - 4)))).to.eq(true)",
											"            } else {",
											"                pm.expect(_.isEqual(response[key], expected[key])).to.eq(true)",
											"            }",
											"        }",
											"    }",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{m2m_token}}"
									}
								],
								"url": {
									"raw": "{{URL}}/projects/{{project_id}}/workstreams/{{id}}",
									"host": [
										"{{URL}}"
									],
									"path": [
										"projects",
										"{{project_id}}",
										"workstreams",
										"{{id}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "get project workstream by user",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const iterationData = pm.iterationData",
											"const httpCode = iterationData.get('httpCode')",
											"pm.test(`Status code is ${httpCode}`, function () {",
											"    pm.response.to.have.status(httpCode);",
											"    if(httpCode === 200){",
											"        const response = pm.response.json()",
											"        const iterationData = pm.iterationData",
											"        const expected = iterationData.get('expected')",
											"        for (let key of Object.keys(expected)) {",
											"            if (_.isString(expected[key]) && expected[key].startsWith('{')) {",
											"                pm.expect(_.isEqual(response[key], pm.environment.get(expected[key].substr(2, expected[key].length - 4)))).to.eq(true)",
											"            } else {",
											"                pm.expect(_.isEqual(response[key], expected[key])).to.eq(true)",
											"            }",
											"        }",
											"    }",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{user_token}}"
									}
								],
								"url": {
									"raw": "{{URL}}/projects/{{project_id}}/workstreams/{{id}}",
									"host": [
										"{{URL}}"
									],
									"path": [
										"projects",
										"{{project_id}}",
										"workstreams",
										"{{id}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "get project workstream with invalid requests",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const iterationData = pm.iterationData",
											"const httpCode = iterationData.get('httpCode')",
											"pm.test(`Status code is ${httpCode}`, function () {",
											"    pm.response.to.have.status(httpCode);",
											"    const response = pm.response.json()",
											"    pm.expect(response.message).to.eq(iterationData.get('message'))",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{admin_token}}"
									}
								],
								"url": {
									"raw": "{{URL}}/projects/{{project_id}}/workstreams/{{id}}",
									"host": [
										"{{URL}}"
									],
									"path": [
										"projects",
										"{{project_id}}",
										"workstreams",
										"{{id}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "get project workstream with all kinds of invalid token",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const iterationData = pm.iterationData",
											"const httpCode = iterationData.get('httpCode')",
											"pm.test(`Status code is ${httpCode}`, function () {",
											"    pm.response.to.have.status(httpCode);",
											"    const response = pm.response.json()",
											"    if (response.message) {",
											"        pm.expect(response.message).to.eq(iterationData.get('message'))",
											"    } else {",
											"        pm.expect(response.result.content.message).to.eq(iterationData.get('message'))",
											"    }",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "{{jwtToken}}"
									}
								],
								"url": {
									"raw": "{{URL}}/projects/{{project_id}}/workstreams/{{id}}",
									"host": [
										"{{URL}}"
									],
									"path": [
										"projects",
										"{{project_id}}",
										"workstreams",
										"{{id}}"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "patch project workstream",
					"item": [
						{
							"name": "patch project workstream by admin",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const iterationData = pm.iterationData",
											"const httpCode = iterationData.get('httpCode')",
											"pm.test(`Status code is ${httpCode}`, function () {",
											"    pm.response.to.have.status(httpCode);",
											"    const response = pm.response.json()",
											"    const iterationData = pm.iterationData",
											"    const expected = iterationData.get('expected')",
											"    for (let key of Object.keys(expected)) {",
											"        if (_.isString(expected[key]) && expected[key].startsWith('{')) {",
											"            pm.expect(_.isEqual(response[key], pm.environment.get(expected[key].substr(2, expected[key].length - 4)))).to.eq(true)",
											"        } else {",
											"            pm.expect(_.isEqual(response[key], expected[key])).to.eq(true)",
											"        }",
											"    }",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"var inputJSONdata = pm.iterationData.get(\"input\");",
											"pm.variables.set(\"input_body\",JSON.stringify(inputJSONdata));"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PATCH",
								"header": [
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{admin_token}}"
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{{input_body}}"
								},
								"url": {
									"raw": "{{URL}}/projects/{{project_id}}/workstreams/{{id}}",
									"host": [
										"{{URL}}"
									],
									"path": [
										"projects",
										"{{project_id}}",
										"workstreams",
										"{{id}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "patch project workstream with all kinds of invalid request body",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const iterationData = pm.iterationData",
											"const httpCode = iterationData.get('httpCode')",
											"pm.test(`Status code is ${httpCode}`, function () {",
											"    pm.response.to.have.status(httpCode);",
											"    const response = pm.response.json()",
											"    pm.expect(response.message).to.eq(iterationData.get('message'))",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"var inputJSONdata = pm.iterationData.get(\"input\");",
											"pm.variables.set(\"input_body\",JSON.stringify(inputJSONdata));"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PATCH",
								"header": [
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{admin_token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{{input_body}}"
								},
								"url": {
									"raw": "{{URL}}/projects/{{project_id}}/workstreams/{{id}}",
									"host": [
										"{{URL}}"
									],
									"path": [
										"projects",
										"{{project_id}}",
										"workstreams",
										"{{id}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "patch project workstream with all kinds of invalid token",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const iterationData = pm.iterationData",
											"const httpCode = iterationData.get('httpCode')",
											"pm.test(`Status code is ${httpCode}`, function () {",
											"    pm.response.to.have.status(httpCode);",
											"    const response = pm.response.json()",
											"    if (response.message) {",
											"        pm.expect(response.message).to.eq(iterationData.get('message'))",
											"    } else {",
											"        pm.expect(response.result.content.message).to.eq(iterationData.get('message'))",
											"    }",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PATCH",
								"header": [
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "{{jwtToken}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"type\": \"this is an updated type\"\n}"
								},
								"url": {
									"raw": "{{URL}}/projects/{{project_id}}/workstreams/{{id}}",
									"host": [
										"{{URL}}"
									],
									"path": [
										"projects",
										"{{project_id}}",
										"workstreams",
										"{{id}}"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "delete project workstream",
					"item": [
						{
							"name": "delete project workstream by admin",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(`Status code is 204`, function () {",
											"    pm.response.to.have.status(204)",
											"    const response = pm.response.text()",
											"    pm.expect(response).to.eq('')",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{admin_token}}"
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"url": {
									"raw": "{{URL}}/projects/{{project_id}}/workstreams/{{id}}",
									"host": [
										"{{URL}}"
									],
									"path": [
										"projects",
										"{{project_id}}",
										"workstreams",
										"{{id}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "delete project workstream by m2m",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(`Status code is 204`, function () {",
											"    pm.response.to.have.status(204)",
											"    const response = pm.response.text()",
											"    pm.expect(response).to.eq('')",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{m2m_token}}"
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"url": {
									"raw": "{{URL}}/projects/{{project_id}}/workstreams/{{id}}",
									"host": [
										"{{URL}}"
									],
									"path": [
										"projects",
										"{{project_id}}",
										"workstreams",
										"{{id}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "delete project workstream with all kinds of invalid request",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const iterationData = pm.iterationData",
											"const httpCode = iterationData.get('httpCode')",
											"pm.test(`Status code is ${httpCode}`, function () {",
											"    pm.response.to.have.status(httpCode);",
											"    const response = pm.response.json()",
											"    if (response.message) {",
											"        pm.expect(response.message).to.contains(iterationData.get('message'))",
											"    } else {",
											"        pm.expect(response.result.content.message).to.eq(iterationData.get('message'))",
											"    }",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "{{jwtToken}}"
									}
								],
								"url": {
									"raw": "{{URL}}/projects/{{project_id}}/workstreams/{{id}}",
									"host": [
										"{{URL}}"
									],
									"path": [
										"projects",
										"{{project_id}}",
										"workstreams",
										"{{id}}"
									]
								}
							},
							"response": []
						}
					]
				}
			]
		},
		{
			"name": "Work",
			"item": [
				{
					"name": "create project work",
					"item": [
						{
							"name": "create project work by admin",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const iterationData = pm.iterationData",
											"const httpCode = iterationData.get('httpCode')",
											"pm.test(`Status code is ${httpCode}`, function () {",
											"    pm.response.to.have.status(httpCode);",
											"    const response = pm.response.json()",
											"    const iterationData = pm.iterationData",
											"    const expected = iterationData.get('expected')",
											"    for (let key of Object.keys(expected)) {",
											"        if (_.isString(expected[key]) && expected[key].startsWith('{')) {",
											"            pm.expect(_.isEqual(response[key], pm.environment.get(expected[key].substr(2, expected[key].length - 4)))).to.eq(true)",
											"        } else {",
											"            pm.expect(_.isEqual(response[key], expected[key])).to.eq(true)",
											"        }",
											"    }",
											"    if (iterationData.get('idLabel')) {",
											"        const idLabel = iterationData.get('idLabel')",
											"        pm.environment.set(idLabel, response.id)",
											"    }",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"var inputJSONdata = pm.iterationData.get(\"input\");",
											"pm.variables.set(\"input_body\",JSON.stringify(inputJSONdata));"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{admin_token}}"
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{{input_body}}"
								},
								"url": {
									"raw": "{{URL}}/projects/{{project_id}}/workstreams/{{workstream_id}}/works",
									"host": [
										"{{URL}}"
									],
									"path": [
										"projects",
										"{{project_id}}",
										"workstreams",
										"{{workstream_id}}",
										"works"
									]
								}
							},
							"response": []
						},
						{
							"name": "create project work with all kinds of invalid request body",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const iterationData = pm.iterationData",
											"const httpCode = iterationData.get('httpCode')",
											"pm.test(`Status code is ${httpCode}`, function () {",
											"    pm.response.to.have.status(httpCode);",
											"    const response = pm.response.json()",
											"    pm.expect(response.message).to.eq(iterationData.get('message'))",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"var inputJSONdata = pm.iterationData.get(\"input\");",
											"pm.variables.set(\"input_body\",JSON.stringify(inputJSONdata));"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{admin_token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{{input_body}}"
								},
								"url": {
									"raw": "{{URL}}/projects/{{project_id}}/workstreams/{{workstream_id}}/works",
									"host": [
										"{{URL}}"
									],
									"path": [
										"projects",
										"{{project_id}}",
										"workstreams",
										"{{workstream_id}}",
										"works"
									]
								}
							},
							"response": []
						},
						{
							"name": "create project work with all kinds of invalid token",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const iterationData = pm.iterationData",
											"const httpCode = iterationData.get('httpCode')",
											"pm.test(`Status code is ${httpCode}`, function () {",
											"    pm.response.to.have.status(httpCode);",
											"    const response = pm.response.json()",
											"    if (response.message) {",
											"        pm.expect(response.message).to.eq(iterationData.get('message'))",
											"    } else {",
											"        pm.expect(response.result.content.message).to.eq(iterationData.get('message'))",
											"    }",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "{{jwtToken}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"name\": \"POSTMANE2E-Project-Phase-by-admin-with-description\",\n\t\"status\": \"active\"\n}"
								},
								"url": {
									"raw": "{{URL}}/projects/{{project_id}}/workstreams/{{workstream_id}}/works",
									"host": [
										"{{URL}}"
									],
									"path": [
										"projects",
										"{{project_id}}",
										"workstreams",
										"{{workstream_id}}",
										"works"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "list project works",
					"item": [
						{
							"name": "list project works by admin",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(`Status code is 200`, function () {",
											"    pm.response.to.have.status(200);",
											"    const response = pm.response.json()",
											"    pm.expect(response.length).to.gt(0)",
											"    const iterationData = pm.iterationData",
											"    const expectedFields = iterationData.get('expectedFields')",
											"    for (let item of response) {",
											"        // make sure the list returns the expected fields",
											"        pm.expect(expectedFields.every(r=> Object.keys(item).indexOf(r) >= 0)).to.eq(true)",
											"        if (iterationData.get('limitedFields')) {",
											"            _.isEqual(iterationData.get('limitedFields'), Object.keys(item))",
											"        }",
											"    }",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"value": "Bearer {{admin_token}}",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{URL}}/projects/{{project_id}}/workstreams/{{workstream_id}}/works?{{params}}",
									"host": [
										"{{URL}}"
									],
									"path": [
										"projects",
										"{{project_id}}",
										"workstreams",
										"{{workstream_id}}",
										"works"
									],
									"query": [
										{
											"key": "{{params}}",
											"value": null
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "list project works by m2m",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(`Status code is 200`, function () {",
											"    pm.response.to.have.status(200);",
											"    const response = pm.response.json()",
											"    pm.expect(response.length).to.gt(0)",
											"    const iterationData = pm.iterationData",
											"    const expectedFields = iterationData.get('expectedFields')",
											"    for (let item of response) {",
											"        // make sure the list returns the expected fields",
											"        pm.expect(expectedFields.every(r=> Object.keys(item).indexOf(r) >= 0)).to.eq(true)",
											"        if (iterationData.get('limitedFields')) {",
											"            _.isEqual(iterationData.get('limitedFields'), Object.keys(item))",
											"        }",
											"    }",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{m2m_token}}"
									}
								],
								"url": {
									"raw": "{{URL}}/projects/{{project_id}}/workstreams/{{workstream_id}}/works?{{params}}",
									"host": [
										"{{URL}}"
									],
									"path": [
										"projects",
										"{{project_id}}",
										"workstreams",
										"{{workstream_id}}",
										"works"
									],
									"query": [
										{
											"key": "{{params}}",
											"value": null
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "list project works by copilot",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(`Status code is 200`, function () {",
											"    pm.response.to.have.status(200);",
											"    const response = pm.response.json()",
											"    pm.expect(response.length).to.gt(0)",
											"    const iterationData = pm.iterationData",
											"    const expectedFields = iterationData.get('expectedFields')",
											"    for (let item of response) {",
											"        // make sure the list returns the expected fields",
											"        pm.expect(expectedFields.every(r=> Object.keys(item).indexOf(r) >= 0)).to.eq(true)",
											"        if (iterationData.get('limitedFields')) {",
											"            _.isEqual(iterationData.get('limitedFields'), Object.keys(item))",
											"        }",
											"    }",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{copilot_token}}"
									}
								],
								"url": {
									"raw": "{{URL}}/projects/{{project_id}}/workstreams/{{workstream_id}}/works?{{params}}",
									"host": [
										"{{URL}}"
									],
									"path": [
										"projects",
										"{{project_id}}",
										"workstreams",
										"{{workstream_id}}",
										"works"
									],
									"query": [
										{
											"key": "{{params}}",
											"value": null
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "list project works by user",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(`Status code is 200`, function () {",
											"    pm.response.to.have.status(200);",
											"    const response = pm.response.json()",
											"    pm.expect(response.length).to.gt(0)",
											"    const iterationData = pm.iterationData",
											"    const expectedFields = iterationData.get('expectedFields')",
											"    for (let item of response) {",
											"        // make sure the list returns the expected fields",
											"        pm.expect(expectedFields.every(r=> Object.keys(item).indexOf(r) >= 0)).to.eq(true)",
											"        if (iterationData.get('limitedFields')) {",
											"            _.isEqual(iterationData.get('limitedFields'), Object.keys(item))",
											"        }",
											"    }",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{user_token}}"
									}
								],
								"url": {
									"raw": "{{URL}}/projects/{{project_id}}/workstreams/{{workstream_id}}/works?{{params}}",
									"host": [
										"{{URL}}"
									],
									"path": [
										"projects",
										"{{project_id}}",
										"workstreams",
										"{{workstream_id}}",
										"works"
									],
									"query": [
										{
											"key": "{{params}}",
											"value": null
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "list project works with all kinds of invalid data",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const iterationData = pm.iterationData",
											"const httpCode = iterationData.get('httpCode')",
											"pm.test(`Status code is ${httpCode}`, function () {",
											"    pm.response.to.have.status(httpCode);",
											"    const response = pm.response.json()",
											"    if (response.message) {",
											"        pm.expect(response.message).to.eq(iterationData.get('message'))",
											"    } else {",
											"        pm.expect(response.result.content.message).to.eq(iterationData.get('message'))",
											"    }",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{admin_token}}"
									}
								],
								"url": {
									"raw": "{{URL}}/projects/{{project_id}}/workstreams/{{workstream_id}}/works?{{params}}",
									"host": [
										"{{URL}}"
									],
									"path": [
										"projects",
										"{{project_id}}",
										"workstreams",
										"{{workstream_id}}",
										"works"
									],
									"query": [
										{
											"key": "{{params}}",
											"value": null
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "list project works with all kinds of invalid token",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const iterationData = pm.iterationData",
											"const httpCode = iterationData.get('httpCode')",
											"pm.test(`Status code is ${httpCode}`, function () {",
											"    pm.response.to.have.status(httpCode);",
											"    const response = pm.response.json()",
											"    if (response.message) {",
											"        pm.expect(response.message).to.eq(iterationData.get('message'))",
											"    } else {",
											"        pm.expect(response.result.content.message).to.eq(iterationData.get('message'))",
											"    }",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "{{jwtToken}}"
									}
								],
								"url": {
									"raw": "{{URL}}/projects/{{project_id}}/workstreams/{{workstream_id}}/works",
									"host": [
										"{{URL}}"
									],
									"path": [
										"projects",
										"{{project_id}}",
										"workstreams",
										"{{workstream_id}}",
										"works"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "get project work",
					"item": [
						{
							"name": "get project work by admin",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const iterationData = pm.iterationData",
											"const httpCode = iterationData.get('httpCode')",
											"pm.test(`Status code is ${httpCode}`, function () {",
											"    pm.response.to.have.status(httpCode);",
											"    if(httpCode === 200){",
											"        const response = pm.response.json()",
											"        const iterationData = pm.iterationData",
											"        const expected = iterationData.get('expected')",
											"        for (let key of Object.keys(expected)) {",
											"            if (_.isString(expected[key]) && expected[key].startsWith('{')) {",
											"                pm.expect(_.isEqual(response[key], pm.environment.get(expected[key].substr(2, expected[key].length - 4)))).to.eq(true)",
											"            } else {",
											"                pm.expect(_.isEqual(response[key], expected[key])).to.eq(true)",
											"            }",
											"        }",
											"    }",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{admin_token}}"
									}
								],
								"url": {
									"raw": "{{URL}}/projects/{{project_id}}/workstreams/{{workstream_id}}/works/{{id}}",
									"host": [
										"{{URL}}"
									],
									"path": [
										"projects",
										"{{project_id}}",
										"workstreams",
										"{{workstream_id}}",
										"works",
										"{{id}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "get project work by m2m",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const iterationData = pm.iterationData",
											"const httpCode = iterationData.get('httpCode')",
											"pm.test(`Status code is ${httpCode}`, function () {",
											"    pm.response.to.have.status(httpCode);",
											"    if(httpCode === 200){",
											"        const response = pm.response.json()",
											"        const iterationData = pm.iterationData",
											"        const expected = iterationData.get('expected')",
											"        for (let key of Object.keys(expected)) {",
											"            if (_.isString(expected[key]) && expected[key].startsWith('{')) {",
											"                pm.expect(_.isEqual(response[key], pm.environment.get(expected[key].substr(2, expected[key].length - 4)))).to.eq(true)",
											"            } else {",
											"                pm.expect(_.isEqual(response[key], expected[key])).to.eq(true)",
											"            }",
											"        }",
											"    }",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{m2m_token}}"
									}
								],
								"url": {
									"raw": "{{URL}}/projects/{{project_id}}/workstreams/{{workstream_id}}/works/{{id}}",
									"host": [
										"{{URL}}"
									],
									"path": [
										"projects",
										"{{project_id}}",
										"workstreams",
										"{{workstream_id}}",
										"works",
										"{{id}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "get project work by copilot",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const iterationData = pm.iterationData",
											"const httpCode = iterationData.get('httpCode')",
											"pm.test(`Status code is ${httpCode}`, function () {",
											"    pm.response.to.have.status(httpCode);",
											"    if(httpCode === 200){",
											"        const response = pm.response.json()",
											"        const iterationData = pm.iterationData",
											"        const expected = iterationData.get('expected')",
											"        for (let key of Object.keys(expected)) {",
											"            if (_.isString(expected[key]) && expected[key].startsWith('{')) {",
											"                pm.expect(_.isEqual(response[key], pm.environment.get(expected[key].substr(2, expected[key].length - 4)))).to.eq(true)",
											"            } else {",
											"                pm.expect(_.isEqual(response[key], expected[key])).to.eq(true)",
											"            }",
											"        }",
											"    }",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{copilot_token}}"
									}
								],
								"url": {
									"raw": "{{URL}}/projects/{{project_id}}/workstreams/{{workstream_id}}/works/{{id}}",
									"host": [
										"{{URL}}"
									],
									"path": [
										"projects",
										"{{project_id}}",
										"workstreams",
										"{{workstream_id}}",
										"works",
										"{{id}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "get project work by user",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const iterationData = pm.iterationData",
											"const httpCode = iterationData.get('httpCode')",
											"pm.test(`Status code is ${httpCode}`, function () {",
											"    pm.response.to.have.status(httpCode);",
											"    if(httpCode === 200){",
											"        const response = pm.response.json()",
											"        const iterationData = pm.iterationData",
											"        const expected = iterationData.get('expected')",
											"        for (let key of Object.keys(expected)) {",
											"            if (_.isString(expected[key]) && expected[key].startsWith('{')) {",
											"                pm.expect(_.isEqual(response[key], pm.environment.get(expected[key].substr(2, expected[key].length - 4)))).to.eq(true)",
											"            } else {",
											"                pm.expect(_.isEqual(response[key], expected[key])).to.eq(true)",
											"            }",
											"        }",
											"    }",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{user_token}}"
									}
								],
								"url": {
									"raw": "{{URL}}/projects/{{project_id}}/workstreams/{{workstream_id}}/works/{{id}}",
									"host": [
										"{{URL}}"
									],
									"path": [
										"projects",
										"{{project_id}}",
										"workstreams",
										"{{workstream_id}}",
										"works",
										"{{id}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "get project work with invalid requests",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const iterationData = pm.iterationData",
											"const httpCode = iterationData.get('httpCode')",
											"pm.test(`Status code is ${httpCode}`, function () {",
											"    pm.response.to.have.status(httpCode);",
											"    const response = pm.response.json()",
											"    pm.expect(response.message).to.eq(iterationData.get('message'))",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{admin_token}}"
									}
								],
								"url": {
									"raw": "{{URL}}/projects/{{project_id}}/workstreams/{{workstream_id}}/works/{{id}}",
									"host": [
										"{{URL}}"
									],
									"path": [
										"projects",
										"{{project_id}}",
										"workstreams",
										"{{workstream_id}}",
										"works",
										"{{id}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "get project work with all kinds of invalid token",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const iterationData = pm.iterationData",
											"const httpCode = iterationData.get('httpCode')",
											"pm.test(`Status code is ${httpCode}`, function () {",
											"    pm.response.to.have.status(httpCode);",
											"    const response = pm.response.json()",
											"    if (response.message) {",
											"        pm.expect(response.message).to.eq(iterationData.get('message'))",
											"    } else {",
											"        pm.expect(response.result.content.message).to.eq(iterationData.get('message'))",
											"    }",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "{{jwtToken}}"
									}
								],
								"url": {
									"raw": "{{URL}}/projects/{{project_id}}/workstreams/{{workstream_id}}/works/{{id}}",
									"host": [
										"{{URL}}"
									],
									"path": [
										"projects",
										"{{project_id}}",
										"workstreams",
										"{{workstream_id}}",
										"works",
										"{{id}}"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "patch project work",
					"item": [
						{
							"name": "patch project work by admin",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const iterationData = pm.iterationData",
											"const httpCode = iterationData.get('httpCode')",
											"pm.test(`Status code is ${httpCode}`, function () {",
											"    pm.response.to.have.status(httpCode);",
											"    const response = pm.response.json()",
											"    const iterationData = pm.iterationData",
											"    const expected = iterationData.get('expected')",
											"    for (let key of Object.keys(expected)) {",
											"        if (_.isString(expected[key]) && expected[key].startsWith('{')) {",
											"            pm.expect(_.isEqual(response[key], pm.environment.get(expected[key].substr(2, expected[key].length - 4)))).to.eq(true)",
											"        } else {",
											"            pm.expect(_.isEqual(response[key], expected[key])).to.eq(true)",
											"        }",
											"    }",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"var inputJSONdata = pm.iterationData.get(\"input\");",
											"pm.variables.set(\"input_body\",JSON.stringify(inputJSONdata));"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PATCH",
								"header": [
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{admin_token}}"
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{{input_body}}"
								},
								"url": {
									"raw": "{{URL}}/projects/{{project_id}}/workstreams/{{workstream_id}}/works/{{id}}",
									"host": [
										"{{URL}}"
									],
									"path": [
										"projects",
										"{{project_id}}",
										"workstreams",
										"{{workstream_id}}",
										"works",
										"{{id}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "patch project work with all kinds of invalid request body",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const iterationData = pm.iterationData",
											"const httpCode = iterationData.get('httpCode')",
											"pm.test(`Status code is ${httpCode}`, function () {",
											"    pm.response.to.have.status(httpCode);",
											"    const response = pm.response.json()",
											"    pm.expect(response.message).to.eq(iterationData.get('message'))",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"var inputJSONdata = pm.iterationData.get(\"input\");",
											"pm.variables.set(\"input_body\",JSON.stringify(inputJSONdata));"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PATCH",
								"header": [
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{admin_token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{{input_body}}"
								},
								"url": {
									"raw": "{{URL}}/projects/{{project_id}}/workstreams/{{workstream_id}}/works/{{id}}",
									"host": [
										"{{URL}}"
									],
									"path": [
										"projects",
										"{{project_id}}",
										"workstreams",
										"{{workstream_id}}",
										"works",
										"{{id}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "patch project work with all kinds of invalid token",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const iterationData = pm.iterationData",
											"const httpCode = iterationData.get('httpCode')",
											"pm.test(`Status code is ${httpCode}`, function () {",
											"    pm.response.to.have.status(httpCode);",
											"    const response = pm.response.json()",
											"    if (response.message) {",
											"        pm.expect(response.message).to.eq(iterationData.get('message'))",
											"    } else {",
											"        pm.expect(response.result.content.message).to.eq(iterationData.get('message'))",
											"    }",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PATCH",
								"header": [
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "{{jwtToken}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"details\": [\"check check\"]\n}"
								},
								"url": {
									"raw": "{{URL}}/projects/{{project_id}}/workstreams/{{workstream_id}}/works/{{id}}",
									"host": [
										"{{URL}}"
									],
									"path": [
										"projects",
										"{{project_id}}",
										"workstreams",
										"{{workstream_id}}",
										"works",
										"{{id}}"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "delete project work",
					"item": [
						{
							"name": "delete project work by admin",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(`Status code is 204`, function () {",
											"    pm.response.to.have.status(204)",
											"    const response = pm.response.text()",
											"    pm.expect(response).to.eq('')",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{admin_token}}"
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"url": {
									"raw": "{{URL}}/projects/{{project_id}}/workstreams/{{workstream_id}}/works/{{id}}",
									"host": [
										"{{URL}}"
									],
									"path": [
										"projects",
										"{{project_id}}",
										"workstreams",
										"{{workstream_id}}",
										"works",
										"{{id}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "delete project work with all kinds of invalid request",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const iterationData = pm.iterationData",
											"const httpCode = iterationData.get('httpCode')",
											"pm.test(`Status code is ${httpCode}`, function () {",
											"    pm.response.to.have.status(httpCode);",
											"    const response = pm.response.json()",
											"    if (response.message) {",
											"        pm.expect(response.message).to.contains(iterationData.get('message'))",
											"    } else {",
											"        pm.expect(response.result.content.message).to.eq(iterationData.get('message'))",
											"    }",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "{{jwtToken}}"
									}
								],
								"url": {
									"raw": "{{URL}}/projects/{{project_id}}/workstreams/{{workstream_id}}/works/{{id}}",
									"host": [
										"{{URL}}"
									],
									"path": [
										"projects",
										"{{project_id}}",
										"workstreams",
										"{{workstream_id}}",
										"works",
										"{{id}}"
									]
								}
							},
							"response": []
						}
					]
				}
			]
		},
		{
			"name": "Work Item",
			"item": [
				{
					"name": "create project work item",
					"item": [
						{
							"name": "create project work item by admin",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const iterationData = pm.iterationData",
											"const httpCode = iterationData.get('httpCode')",
											"pm.test(`Status code is ${httpCode}`, function () {",
											"    pm.response.to.have.status(httpCode);",
											"    const response = pm.response.json()",
											"    const iterationData = pm.iterationData",
											"    const expected = iterationData.get('expected')",
											"    for (let key of Object.keys(expected)) {",
											"        if (_.isString(expected[key]) && expected[key].startsWith('{')) {",
											"            pm.expect(_.isEqual(response[key], pm.environment.get(expected[key].substr(2, expected[key].length - 4)))).to.eq(true)",
											"        } else {",
											"            pm.expect(_.isEqual(response[key], expected[key])).to.eq(true)",
											"        }",
											"    }",
											"    if (iterationData.get('idLabel')) {",
											"        const idLabel = iterationData.get('idLabel')",
											"        pm.environment.set(idLabel, response.id)",
											"    }",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"var inputJSONdata = pm.iterationData.get(\"input\");",
											"pm.variables.set(\"input_body\",JSON.stringify(inputJSONdata));"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{admin_token}}"
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{{input_body}}"
								},
								"url": {
									"raw": "{{URL}}/projects/{{project_id}}/workstreams/{{workstream_id}}/works/{{phase_id}}/workitems",
									"host": [
										"{{URL}}"
									],
									"path": [
										"projects",
										"{{project_id}}",
										"workstreams",
										"{{workstream_id}}",
										"works",
										"{{phase_id}}",
										"workitems"
									]
								}
							},
							"response": []
						},
						{
							"name": "create project work item with all kinds of invalid request body",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const iterationData = pm.iterationData",
											"const httpCode = iterationData.get('httpCode')",
											"pm.test(`Status code is ${httpCode}`, function () {",
											"    pm.response.to.have.status(httpCode);",
											"    const response = pm.response.json()",
											"    pm.expect(response.message).to.eq(iterationData.get('message'))",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"var inputJSONdata = pm.iterationData.get(\"input\");",
											"pm.variables.set(\"input_body\",JSON.stringify(inputJSONdata));"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{admin_token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{{input_body}}"
								},
								"url": {
									"raw": "{{URL}}/projects/{{project_id}}/workstreams/{{workstream_id}}/works/{{phase_id}}/workitems",
									"host": [
										"{{URL}}"
									],
									"path": [
										"projects",
										"{{project_id}}",
										"workstreams",
										"{{workstream_id}}",
										"works",
										"{{phase_id}}",
										"workitems"
									]
								}
							},
							"response": []
						},
						{
							"name": "create project work item with all kinds of invalid token",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const iterationData = pm.iterationData",
											"const httpCode = iterationData.get('httpCode')",
											"pm.test(`Status code is ${httpCode}`, function () {",
											"    pm.response.to.have.status(httpCode);",
											"    const response = pm.response.json()",
											"    if (response.message) {",
											"        pm.expect(response.message).to.eq(iterationData.get('message'))",
											"    } else {",
											"        pm.expect(response.result.content.message).to.eq(iterationData.get('message'))",
											"    }",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "{{jwtToken}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"name\": \"POSTMANE2E-Project-Phase-by-admin-with-description\",\n\t\"type\": \"active\"\n}"
								},
								"url": {
									"raw": "{{URL}}/projects/{{project_id}}/workstreams/{{workstream_id}}/works/{{phase_id}}/workitems",
									"host": [
										"{{URL}}"
									],
									"path": [
										"projects",
										"{{project_id}}",
										"workstreams",
										"{{workstream_id}}",
										"works",
										"{{phase_id}}",
										"workitems"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "list project work items",
					"item": [
						{
							"name": "list project work items by admin",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(`Status code is 200`, function () {",
											"    pm.response.to.have.status(200);",
											"    const response = pm.response.json()",
											"    pm.expect(response.length).to.gt(0)",
											"    const iterationData = pm.iterationData",
											"    const expectedFields = iterationData.get('expectedFields')",
											"    for (let item of response) {",
											"        // make sure the list returns the expected fields",
											"        pm.expect(expectedFields.every(r=> Object.keys(item).indexOf(r) >= 0)).to.eq(true)",
											"        if (iterationData.get('limitedFields')) {",
											"            _.isEqual(iterationData.get('limitedFields'), Object.keys(item))",
											"        }",
											"    }",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"value": "Bearer {{admin_token}}",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{URL}}/projects/{{project_id}}/workstreams/{{workstream_id}}/works/{{phase_id}}/workitems",
									"host": [
										"{{URL}}"
									],
									"path": [
										"projects",
										"{{project_id}}",
										"workstreams",
										"{{workstream_id}}",
										"works",
										"{{phase_id}}",
										"workitems"
									]
								}
							},
							"response": []
						},
						{
							"name": "list project work items by m2m",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(`Status code is 200`, function () {",
											"    pm.response.to.have.status(200);",
											"    const response = pm.response.json()",
											"    pm.expect(response.length).to.gt(0)",
											"    const iterationData = pm.iterationData",
											"    const expectedFields = iterationData.get('expectedFields')",
											"    for (let item of response) {",
											"        // make sure the list returns the expected fields",
											"        pm.expect(expectedFields.every(r=> Object.keys(item).indexOf(r) >= 0)).to.eq(true)",
											"        if (iterationData.get('limitedFields')) {",
											"            _.isEqual(iterationData.get('limitedFields'), Object.keys(item))",
											"        }",
											"    }",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{m2m_token}}"
									}
								],
								"url": {
									"raw": "{{URL}}/projects/{{project_id}}/workstreams/{{workstream_id}}/works/{{phase_id}}/workitems",
									"host": [
										"{{URL}}"
									],
									"path": [
										"projects",
										"{{project_id}}",
										"workstreams",
										"{{workstream_id}}",
										"works",
										"{{phase_id}}",
										"workitems"
									]
								}
							},
							"response": []
						},
						{
							"name": "list project work items by copilot",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(`Status code is 200`, function () {",
											"    pm.response.to.have.status(200);",
											"    const response = pm.response.json()",
											"    pm.expect(response.length).to.gt(0)",
											"    const iterationData = pm.iterationData",
											"    const expectedFields = iterationData.get('expectedFields')",
											"    for (let item of response) {",
											"        // make sure the list returns the expected fields",
											"        pm.expect(expectedFields.every(r=> Object.keys(item).indexOf(r) >= 0)).to.eq(true)",
											"        if (iterationData.get('limitedFields')) {",
											"            _.isEqual(iterationData.get('limitedFields'), Object.keys(item))",
											"        }",
											"    }",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{copilot_token}}"
									}
								],
								"url": {
									"raw": "{{URL}}/projects/{{project_id}}/workstreams/{{workstream_id}}/works/{{phase_id}}/workitems",
									"host": [
										"{{URL}}"
									],
									"path": [
										"projects",
										"{{project_id}}",
										"workstreams",
										"{{workstream_id}}",
										"works",
										"{{phase_id}}",
										"workitems"
									]
								}
							},
							"response": []
						},
						{
							"name": "list project work items by user",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(`Status code is 200`, function () {",
											"    pm.response.to.have.status(200);",
											"    const response = pm.response.json()",
											"    pm.expect(response.length).to.gt(0)",
											"    const iterationData = pm.iterationData",
											"    const expectedFields = iterationData.get('expectedFields')",
											"    for (let item of response) {",
											"        // make sure the list returns the expected fields",
											"        pm.expect(expectedFields.every(r=> Object.keys(item).indexOf(r) >= 0)).to.eq(true)",
											"        if (iterationData.get('limitedFields')) {",
											"            _.isEqual(iterationData.get('limitedFields'), Object.keys(item))",
											"        }",
											"    }",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{user_token}}"
									}
								],
								"url": {
									"raw": "{{URL}}/projects/{{project_id}}/workstreams/{{workstream_id}}/works/{{phase_id}}/workitems",
									"host": [
										"{{URL}}"
									],
									"path": [
										"projects",
										"{{project_id}}",
										"workstreams",
										"{{workstream_id}}",
										"works",
										"{{phase_id}}",
										"workitems"
									]
								}
							},
							"response": []
						},
						{
							"name": "list project work items with all kinds of invalid data",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const iterationData = pm.iterationData",
											"const httpCode = iterationData.get('httpCode')",
											"pm.test(`Status code is ${httpCode}`, function () {",
											"    pm.response.to.have.status(httpCode);",
											"    const response = pm.response.json()",
											"    if (response.message) {",
											"        pm.expect(response.message).to.eq(iterationData.get('message'))",
											"    } else {",
											"        pm.expect(response.result.content.message).to.eq(iterationData.get('message'))",
											"    }",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{admin_token}}"
									}
								],
								"url": {
									"raw": "{{URL}}/projects/{{project_id}}/workstreams/{{workstream_id}}/works/{{phase_id}}/workitems",
									"host": [
										"{{URL}}"
									],
									"path": [
										"projects",
										"{{project_id}}",
										"workstreams",
										"{{workstream_id}}",
										"works",
										"{{phase_id}}",
										"workitems"
									]
								}
							},
							"response": []
						},
						{
							"name": "list project work items with all kinds of invalid token",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const iterationData = pm.iterationData",
											"const httpCode = iterationData.get('httpCode')",
											"pm.test(`Status code is ${httpCode}`, function () {",
											"    pm.response.to.have.status(httpCode);",
											"    const response = pm.response.json()",
											"    if (response.message) {",
											"        pm.expect(response.message).to.eq(iterationData.get('message'))",
											"    } else {",
											"        pm.expect(response.result.content.message).to.eq(iterationData.get('message'))",
											"    }",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "{{jwtToken}}"
									}
								],
								"url": {
									"raw": "{{URL}}/projects/{{project_id}}/workstreams/{{workstream_id}}/works/{{phase_id}}/workitems",
									"host": [
										"{{URL}}"
									],
									"path": [
										"projects",
										"{{project_id}}",
										"workstreams",
										"{{workstream_id}}",
										"works",
										"{{phase_id}}",
										"workitems"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "get project work item",
					"item": [
						{
							"name": "get project work item by admin",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const iterationData = pm.iterationData",
											"const httpCode = iterationData.get('httpCode')",
											"pm.test(`Status code is ${httpCode}`, function () {",
											"    pm.response.to.have.status(httpCode);",
											"    if(httpCode === 200){",
											"        const response = pm.response.json()",
											"        const iterationData = pm.iterationData",
											"        const expected = iterationData.get('expected')",
											"        for (let key of Object.keys(expected)) {",
											"            if (_.isString(expected[key]) && expected[key].startsWith('{')) {",
											"                pm.expect(_.isEqual(response[key], pm.environment.get(expected[key].substr(2, expected[key].length - 4)))).to.eq(true)",
											"            } else {",
											"                pm.expect(_.isEqual(response[key], expected[key])).to.eq(true)",
											"            }",
											"        }",
											"    }",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{admin_token}}"
									}
								],
								"url": {
									"raw": "{{URL}}/projects/{{project_id}}/workstreams/{{workstream_id}}/works/{{phase_id}}/workitems/{{id}}",
									"host": [
										"{{URL}}"
									],
									"path": [
										"projects",
										"{{project_id}}",
										"workstreams",
										"{{workstream_id}}",
										"works",
										"{{phase_id}}",
										"workitems",
										"{{id}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "get project work item by m2m",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const iterationData = pm.iterationData",
											"const httpCode = iterationData.get('httpCode')",
											"pm.test(`Status code is ${httpCode}`, function () {",
											"    pm.response.to.have.status(httpCode);",
											"    if(httpCode === 200){",
											"        const response = pm.response.json()",
											"        const iterationData = pm.iterationData",
											"        const expected = iterationData.get('expected')",
											"        for (let key of Object.keys(expected)) {",
											"            if (_.isString(expected[key]) && expected[key].startsWith('{')) {",
											"                pm.expect(_.isEqual(response[key], pm.environment.get(expected[key].substr(2, expected[key].length - 4)))).to.eq(true)",
											"            } else {",
											"                pm.expect(_.isEqual(response[key], expected[key])).to.eq(true)",
											"            }",
											"        }",
											"    }",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{m2m_token}}"
									}
								],
								"url": {
									"raw": "{{URL}}/projects/{{project_id}}/workstreams/{{workstream_id}}/works/{{phase_id}}/workitems/{{id}}",
									"host": [
										"{{URL}}"
									],
									"path": [
										"projects",
										"{{project_id}}",
										"workstreams",
										"{{workstream_id}}",
										"works",
										"{{phase_id}}",
										"workitems",
										"{{id}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "get project work item by copilot",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const iterationData = pm.iterationData",
											"const httpCode = iterationData.get('httpCode')",
											"pm.test(`Status code is ${httpCode}`, function () {",
											"    pm.response.to.have.status(httpCode);",
											"    if(httpCode === 200){",
											"        const response = pm.response.json()",
											"        const iterationData = pm.iterationData",
											"        const expected = iterationData.get('expected')",
											"        for (let key of Object.keys(expected)) {",
											"            if (_.isString(expected[key]) && expected[key].startsWith('{')) {",
											"                pm.expect(_.isEqual(response[key], pm.environment.get(expected[key].substr(2, expected[key].length - 4)))).to.eq(true)",
											"            } else {",
											"                pm.expect(_.isEqual(response[key], expected[key])).to.eq(true)",
											"            }",
											"        }",
											"    }",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{copilot_token}}"
									}
								],
								"url": {
									"raw": "{{URL}}/projects/{{project_id}}/workstreams/{{workstream_id}}/works/{{phase_id}}/workitems/{{id}}",
									"host": [
										"{{URL}}"
									],
									"path": [
										"projects",
										"{{project_id}}",
										"workstreams",
										"{{workstream_id}}",
										"works",
										"{{phase_id}}",
										"workitems",
										"{{id}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "get project work item by user",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const iterationData = pm.iterationData",
											"const httpCode = iterationData.get('httpCode')",
											"pm.test(`Status code is ${httpCode}`, function () {",
											"    pm.response.to.have.status(httpCode);",
											"    if(httpCode === 200){",
											"        const response = pm.response.json()",
											"        const iterationData = pm.iterationData",
											"        const expected = iterationData.get('expected')",
											"        for (let key of Object.keys(expected)) {",
											"            if (_.isString(expected[key]) && expected[key].startsWith('{')) {",
											"                pm.expect(_.isEqual(response[key], pm.environment.get(expected[key].substr(2, expected[key].length - 4)))).to.eq(true)",
											"            } else {",
											"                pm.expect(_.isEqual(response[key], expected[key])).to.eq(true)",
											"            }",
											"        }",
											"    }",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{user_token}}"
									}
								],
								"url": {
									"raw": "{{URL}}/projects/{{project_id}}/workstreams/{{workstream_id}}/works/{{phase_id}}/workitems/{{id}}",
									"host": [
										"{{URL}}"
									],
									"path": [
										"projects",
										"{{project_id}}",
										"workstreams",
										"{{workstream_id}}",
										"works",
										"{{phase_id}}",
										"workitems",
										"{{id}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "get project work item with invalid requests",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const iterationData = pm.iterationData",
											"const httpCode = iterationData.get('httpCode')",
											"pm.test(`Status code is ${httpCode}`, function () {",
											"    pm.response.to.have.status(httpCode);",
											"    const response = pm.response.json()",
											"    pm.expect(response.message).to.eq(iterationData.get('message'))",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{admin_token}}"
									}
								],
								"url": {
									"raw": "{{URL}}/projects/{{project_id}}/workstreams/{{workstream_id}}/works/{{phase_id}}/workitems/{{id}}",
									"host": [
										"{{URL}}"
									],
									"path": [
										"projects",
										"{{project_id}}",
										"workstreams",
										"{{workstream_id}}",
										"works",
										"{{phase_id}}",
										"workitems",
										"{{id}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "get project work item with all kinds of invalid token",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const iterationData = pm.iterationData",
											"const httpCode = iterationData.get('httpCode')",
											"pm.test(`Status code is ${httpCode}`, function () {",
											"    pm.response.to.have.status(httpCode);",
											"    const response = pm.response.json()",
											"    if (response.message) {",
											"        pm.expect(response.message).to.eq(iterationData.get('message'))",
											"    } else {",
											"        pm.expect(response.result.content.message).to.eq(iterationData.get('message'))",
											"    }",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "{{jwtToken}}"
									}
								],
								"url": {
									"raw": "{{URL}}/projects/{{project_id}}/workstreams/{{workstream_id}}/works/{{phase_id}}/workitems/{{id}}",
									"host": [
										"{{URL}}"
									],
									"path": [
										"projects",
										"{{project_id}}",
										"workstreams",
										"{{workstream_id}}",
										"works",
										"{{phase_id}}",
										"workitems",
										"{{id}}"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "patch project work item",
					"item": [
						{
							"name": "patch project work item by admin",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const iterationData = pm.iterationData",
											"const httpCode = iterationData.get('httpCode')",
											"pm.test(`Status code is ${httpCode}`, function () {",
											"    pm.response.to.have.status(httpCode);",
											"    const response = pm.response.json()",
											"    const iterationData = pm.iterationData",
											"    const expected = iterationData.get('expected')",
											"    for (let key of Object.keys(expected)) {",
											"        if (_.isString(expected[key]) && expected[key].startsWith('{')) {",
											"            pm.expect(_.isEqual(response[key], pm.environment.get(expected[key].substr(2, expected[key].length - 4)))).to.eq(true)",
											"        } else {",
											"            pm.expect(_.isEqual(response[key], expected[key])).to.eq(true)",
											"        }",
											"    }",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"var inputJSONdata = pm.iterationData.get(\"input\");",
											"pm.variables.set(\"input_body\",JSON.stringify(inputJSONdata));"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PATCH",
								"header": [
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{admin_token}}"
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{{input_body}}"
								},
								"url": {
									"raw": "{{URL}}/projects/{{project_id}}/workstreams/{{workstream_id}}/works/{{phase_id}}/workitems/{{id}}",
									"host": [
										"{{URL}}"
									],
									"path": [
										"projects",
										"{{project_id}}",
										"workstreams",
										"{{workstream_id}}",
										"works",
										"{{phase_id}}",
										"workitems",
										"{{id}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "patch project work item with all kinds of invalid request body",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const iterationData = pm.iterationData",
											"const httpCode = iterationData.get('httpCode')",
											"pm.test(`Status code is ${httpCode}`, function () {",
											"    pm.response.to.have.status(httpCode);",
											"    const response = pm.response.json()",
											"    pm.expect(response.message).to.includes(iterationData.get('message'))",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"var inputJSONdata = pm.iterationData.get(\"input\");",
											"pm.variables.set(\"input_body\",JSON.stringify(inputJSONdata));"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PATCH",
								"header": [
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{admin_token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{{input_body}}"
								},
								"url": {
									"raw": "{{URL}}/projects/{{project_id}}/workstreams/{{workstream_id}}/works/{{phase_id}}/workitems/{{id}}",
									"host": [
										"{{URL}}"
									],
									"path": [
										"projects",
										"{{project_id}}",
										"workstreams",
										"{{workstream_id}}",
										"works",
										"{{phase_id}}",
										"workitems",
										"{{id}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "patch project work item with all kinds of invalid token",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const iterationData = pm.iterationData",
											"const httpCode = iterationData.get('httpCode')",
											"pm.test(`Status code is ${httpCode}`, function () {",
											"    pm.response.to.have.status(httpCode);",
											"    const response = pm.response.json()",
											"    if (response.message) {",
											"        pm.expect(response.message).to.eq(iterationData.get('message'))",
											"    } else {",
											"        pm.expect(response.result.content.message).to.eq(iterationData.get('message'))",
											"    }",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PATCH",
								"header": [
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "{{jwtToken}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"details\": [\"check check\"]\n}"
								},
								"url": {
									"raw": "{{URL}}/projects/{{project_id}}/workstreams/{{workstream_id}}/works/{{phase_id}}/workitems/{{id}}",
									"host": [
										"{{URL}}"
									],
									"path": [
										"projects",
										"{{project_id}}",
										"workstreams",
										"{{workstream_id}}",
										"works",
										"{{phase_id}}",
										"workitems",
										"{{id}}"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "delete project work item",
					"item": [
						{
							"name": "delete project work item by admin",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(`Status code is 204`, function () {",
											"    pm.response.to.have.status(204)",
											"    const response = pm.response.text()",
											"    pm.expect(response).to.eq('')",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{admin_token}}"
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"url": {
									"raw": "{{URL}}/projects/{{project_id}}/workstreams/{{workstream_id}}/works/{{phase_id}}/workitems/{{id}}",
									"host": [
										"{{URL}}"
									],
									"path": [
										"projects",
										"{{project_id}}",
										"workstreams",
										"{{workstream_id}}",
										"works",
										"{{phase_id}}",
										"workitems",
										"{{id}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "delete project work item with all kinds of invalid request",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const iterationData = pm.iterationData",
											"const httpCode = iterationData.get('httpCode')",
											"pm.test(`Status code is ${httpCode}`, function () {",
											"    pm.response.to.have.status(httpCode);",
											"    const response = pm.response.json()",
											"    if (response.message) {",
											"        pm.expect(response.message).to.contains(iterationData.get('message'))",
											"    } else {",
											"        pm.expect(response.result.content.message).to.eq(iterationData.get('message'))",
											"    }",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "{{jwtToken}}"
									}
								],
								"url": {
									"raw": "{{URL}}/projects/{{project_id}}/workstreams/{{workstream_id}}/works/{{phase_id}}/workitems/{{id}}",
									"host": [
										"{{URL}}"
									],
									"path": [
										"projects",
										"{{project_id}}",
										"workstreams",
										"{{workstream_id}}",
										"works",
										"{{phase_id}}",
										"workitems",
										"{{id}}"
									]
								}
							},
							"response": []
						}
					]
				}
			]
		},
		{
			"name": "Project Settings",
			"item": [
				{
					"name": "create project setting",
					"item": [
						{
							"name": "create project setting by admin",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const iterationData = pm.iterationData",
											"const httpCode = iterationData.get('httpCode')",
											"pm.test(`Status code is ${httpCode}`, function () {",
											"    pm.response.to.have.status(httpCode);",
											"    const response = pm.response.json()",
											"    const iterationData = pm.iterationData",
											"    const expected = iterationData.get('expected')",
											"    for (let key of Object.keys(expected)) {",
											"        if (_.isString(expected[key]) && expected[key].startsWith('{')) {",
											"            pm.expect(_.isEqual(response[key], pm.environment.get(expected[key].substr(2, expected[key].length - 4)))).to.eq(true)",
											"        } else {",
											"            pm.expect(_.isEqual(response[key], expected[key])).to.eq(true)",
											"        }",
											"    }",
											"    if (iterationData.get('idLabel')) {",
											"        const idLabel = iterationData.get('idLabel')",
											"        pm.environment.set(idLabel, response.id)",
											"    }",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"var inputJSONdata = pm.iterationData.get(\"input\");",
											"pm.variables.set(\"input_body\",JSON.stringify(inputJSONdata));"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{admin_token}}"
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{{input_body}}"
								},
								"url": {
									"raw": "{{URL}}/projects/{{project_id}}/settings",
									"host": [
										"{{URL}}"
									],
									"path": [
										"projects",
										"{{project_id}}",
										"settings"
									]
								}
							},
							"response": []
						},
						{
							"name": "create project setting by m2m",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const iterationData = pm.iterationData",
											"const httpCode = iterationData.get('httpCode')",
											"pm.test(`Status code is ${httpCode}`, function () {",
											"    pm.response.to.have.status(httpCode);",
											"    const response = pm.response.json()",
											"    const iterationData = pm.iterationData",
											"    const expected = iterationData.get('expected')",
											"    for (let key of Object.keys(expected)) {",
											"        if (_.isString(expected[key]) && expected[key].startsWith('{')) {",
											"            pm.expect(_.isEqual(response[key], pm.environment.get(expected[key].substr(2, expected[key].length - 4)))).to.eq(true)",
											"        } else {",
											"            pm.expect(_.isEqual(response[key], expected[key])).to.eq(true)",
											"        }",
											"    }",
											"    if (iterationData.get('idLabel')) {",
											"        const idLabel = iterationData.get('idLabel')",
											"        pm.environment.set(idLabel, response.id)",
											"    }",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"var inputJSONdata = pm.iterationData.get(\"input\");",
											"pm.variables.set(\"input_body\",JSON.stringify(inputJSONdata));"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{m2m_token}}"
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{{input_body}}"
								},
								"url": {
									"raw": "{{URL}}/projects/{{project_id}}/settings",
									"host": [
										"{{URL}}"
									],
									"path": [
										"projects",
										"{{project_id}}",
										"settings"
									]
								}
							},
							"response": []
						},
						{
							"name": "create project setting with all kinds of invalid request body",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const iterationData = pm.iterationData",
											"const httpCode = iterationData.get('httpCode')",
											"pm.test(`Status code is ${httpCode}`, function () {",
											"    pm.response.to.have.status(httpCode);",
											"    const response = pm.response.json()",
											"    pm.expect(response.message).to.includes(iterationData.get('message'))",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"var inputJSONdata = pm.iterationData.get(\"input\");",
											"pm.variables.set(\"input_body\",JSON.stringify(inputJSONdata));"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{admin_token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{{input_body}}"
								},
								"url": {
									"raw": "{{URL}}/projects/{{project_id}}/settings",
									"host": [
										"{{URL}}"
									],
									"path": [
										"projects",
										"{{project_id}}",
										"settings"
									]
								}
							},
							"response": []
						},
						{
							"name": "create project setting with all kinds of invalid token",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const iterationData = pm.iterationData",
											"const httpCode = iterationData.get('httpCode')",
											"pm.test(`Status code is ${httpCode}`, function () {",
											"    pm.response.to.have.status(httpCode);",
											"    const response = pm.response.json()",
											"    if (response.message) {",
											"        pm.expect(response.message).to.eq(iterationData.get('message'))",
											"    } else {",
											"        pm.expect(response.result.content.message).to.eq(iterationData.get('message'))",
											"    }",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "{{jwtToken}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n      \"key\": \"POSTMANE2E-Project-Setting-by-valid-fields-for testing\",\n      \"value\": \"1000\",\n      \"valueType\": \"double\",\n      \"writePermission\": {\n        \"allowRule\": {\n          \"projectRoles\": [\"account_manager\"],\n          \"topcoderRoles\": [\"administrator\", \"Connect Admin\"]\n        },\n        \"denyRule\": {\n          \"topcoderRoles\": [\"Connect Copilot Manager\"]\n        }\n      },\n      \"readPermission\": {\n        \"projectRoles\": [\"manager\"],\n        \"topcoderRoles\": [\"administrator\", \"Connect Admin\", \"Connect Account Manager\"]\n      }\n}"
								},
								"url": {
									"raw": "{{URL}}/projects/{{project_id}}/settings",
									"host": [
										"{{URL}}"
									],
									"path": [
										"projects",
										"{{project_id}}",
										"settings"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "list project settings",
					"item": [
						{
							"name": "list project settings by admin",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(`Status code is 200`, function () {",
											"    pm.response.to.have.status(200);",
											"    const response = pm.response.json()",
											"    pm.expect(response.length).to.gt(0)",
											"    const iterationData = pm.iterationData",
											"    const expectedFields = iterationData.get('expectedFields')",
											"    for (let item of response) {",
											"        // make sure the list returns the expected fields",
											"        pm.expect(expectedFields.every(r=> Object.keys(item).indexOf(r) >= 0)).to.eq(true)",
											"        if (iterationData.get('limitedFields')) {",
											"            _.isEqual(iterationData.get('limitedFields'), Object.keys(item))",
											"        }",
											"    }",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"value": "Bearer {{admin_token}}",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{URL}}/projects/{{project_id}}/settings",
									"host": [
										"{{URL}}"
									],
									"path": [
										"projects",
										"{{project_id}}",
										"settings"
									]
								}
							},
							"response": []
						},
						{
							"name": "list project settings by m2m",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(`Status code is 200`, function () {",
											"    pm.response.to.have.status(200);",
											"    const response = pm.response.json()",
											"    pm.expect(response.length).to.gt(0)",
											"    const iterationData = pm.iterationData",
											"    const expectedFields = iterationData.get('expectedFields')",
											"    for (let item of response) {",
											"        // make sure the list returns the expected fields",
											"        pm.expect(expectedFields.every(r=> Object.keys(item).indexOf(r) >= 0)).to.eq(true)",
											"        if (iterationData.get('limitedFields')) {",
											"            _.isEqual(iterationData.get('limitedFields'), Object.keys(item))",
											"        }",
											"    }",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{m2m_token}}"
									}
								],
								"url": {
									"raw": "{{URL}}/projects/{{project_id}}/settings",
									"host": [
										"{{URL}}"
									],
									"path": [
										"projects",
										"{{project_id}}",
										"settings"
									]
								}
							},
							"response": []
						},
						{
							"name": "list project settings by copilot",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(`Status code is 200`, function () {",
											"    pm.response.to.have.status(200);",
											"    const response = pm.response.json()",
											"    pm.expect(response.length).to.gt(0)",
											"    const iterationData = pm.iterationData",
											"    const expectedFields = iterationData.get('expectedFields')",
											"    for (let item of response) {",
											"        // make sure the list returns the expected fields",
											"        pm.expect(expectedFields.every(r=> Object.keys(item).indexOf(r) >= 0)).to.eq(true)",
											"        if (iterationData.get('limitedFields')) {",
											"            _.isEqual(iterationData.get('limitedFields'), Object.keys(item))",
											"        }",
											"    }",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{copilot_token}}"
									}
								],
								"url": {
									"raw": "{{URL}}/projects/{{project_id}}/settings",
									"host": [
										"{{URL}}"
									],
									"path": [
										"projects",
										"{{project_id}}",
										"settings"
									]
								}
							},
							"response": []
						},
						{
							"name": "list project settings by user",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(`Status code is 200`, function () {",
											"    pm.response.to.have.status(200);",
											"    const response = pm.response.json()",
											"    pm.expect(response.length).to.gte(0)",
											"    const iterationData = pm.iterationData",
											"    const expectedFields = iterationData.get('expectedFields')",
											"    for (let item of response) {",
											"        // make sure the list returns the expected fields",
											"        pm.expect(expectedFields.every(r=> Object.keys(item).indexOf(r) >= 0)).to.eq(true)",
											"        if (iterationData.get('limitedFields')) {",
											"            _.isEqual(iterationData.get('limitedFields'), Object.keys(item))",
											"        }",
											"    }",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{user_token}}"
									}
								],
								"url": {
									"raw": "{{URL}}/projects/{{project_id}}/settings",
									"host": [
										"{{URL}}"
									],
									"path": [
										"projects",
										"{{project_id}}",
										"settings"
									]
								}
							},
							"response": []
						},
						{
							"name": "list project settings with all kinds of invalid data",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const iterationData = pm.iterationData",
											"const httpCode = iterationData.get('httpCode')",
											"pm.test(`Status code is ${httpCode}`, function () {",
											"    pm.response.to.have.status(httpCode);",
											"    const response = pm.response.json()",
											"    if (response.message) {",
											"        pm.expect(response.message).to.eq(iterationData.get('message'))",
											"    } else {",
											"        pm.expect(response.result.content.message).to.eq(iterationData.get('message'))",
											"    }",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{admin_token}}"
									}
								],
								"url": {
									"raw": "{{URL}}/projects/{{project_id}}/settings",
									"host": [
										"{{URL}}"
									],
									"path": [
										"projects",
										"{{project_id}}",
										"settings"
									]
								}
							},
							"response": []
						},
						{
							"name": "list project settings with all kinds of invalid token",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const iterationData = pm.iterationData",
											"const httpCode = iterationData.get('httpCode')",
											"pm.test(`Status code is ${httpCode}`, function () {",
											"    pm.response.to.have.status(httpCode);",
											"    const response = pm.response.json()",
											"    if (response.message) {",
											"        pm.expect(response.message).to.eq(iterationData.get('message'))",
											"    } else {",
											"        pm.expect(response.result.content.message).to.eq(iterationData.get('message'))",
											"    }",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "{{jwtToken}}"
									}
								],
								"url": {
									"raw": "{{URL}}/projects/{{project_id}}/settings",
									"host": [
										"{{URL}}"
									],
									"path": [
										"projects",
										"{{project_id}}",
										"settings"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "patch project setting",
					"item": [
						{
							"name": "patch project setting by admin",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const iterationData = pm.iterationData",
											"const httpCode = iterationData.get('httpCode')",
											"pm.test(`Status code is ${httpCode}`, function () {",
											"    pm.response.to.have.status(httpCode);",
											"    const response = pm.response.json()",
											"    const iterationData = pm.iterationData",
											"    const expected = iterationData.get('expected')",
											"    for (let key of Object.keys(expected)) {",
											"        if (_.isString(expected[key]) && expected[key].startsWith('{')) {",
											"            pm.expect(_.isEqual(response[key], pm.environment.get(expected[key].substr(2, expected[key].length - 4)))).to.eq(true)",
											"        } else {",
											"            pm.expect(_.isEqual(response[key], expected[key])).to.eq(true)",
											"        }",
											"    }",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"var inputJSONdata = pm.iterationData.get(\"input\");",
											"pm.variables.set(\"input_body\",JSON.stringify(inputJSONdata));"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PATCH",
								"header": [
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{admin_token}}"
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{{input_body}}"
								},
								"url": {
									"raw": "{{URL}}/projects/{{project_id}}/settings/{{id}}",
									"host": [
										"{{URL}}"
									],
									"path": [
										"projects",
										"{{project_id}}",
										"settings",
										"{{id}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "patch project setting with all kinds of invalid request body",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const iterationData = pm.iterationData",
											"const httpCode = iterationData.get('httpCode')",
											"pm.test(`Status code is ${httpCode}`, function () {",
											"    pm.response.to.have.status(httpCode);",
											"    const response = pm.response.json()",
											"    pm.expect(response.message).to.includes(iterationData.get('message'))",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"var inputJSONdata = pm.iterationData.get(\"input\");",
											"pm.variables.set(\"input_body\",JSON.stringify(inputJSONdata));"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PATCH",
								"header": [
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{admin_token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{{input_body}}"
								},
								"url": {
									"raw": "{{URL}}/projects/{{project_id}}/settings/{{id}}",
									"host": [
										"{{URL}}"
									],
									"path": [
										"projects",
										"{{project_id}}",
										"settings",
										"{{id}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "patch project setting with all kinds of invalid token",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const iterationData = pm.iterationData",
											"const httpCode = iterationData.get('httpCode')",
											"pm.test(`Status code is ${httpCode}`, function () {",
											"    pm.response.to.have.status(httpCode);",
											"    const response = pm.response.json()",
											"    if (response.message) {",
											"        pm.expect(response.message).to.eq(iterationData.get('message'))",
											"    } else {",
											"        pm.expect(response.result.content.message).to.eq(iterationData.get('message'))",
											"    }",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PATCH",
								"header": [
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "{{jwtToken}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n}"
								},
								"url": {
									"raw": "{{URL}}/projects/{{project_id}}/settings/{{id}}",
									"host": [
										"{{URL}}"
									],
									"path": [
										"projects",
										"{{project_id}}",
										"settings",
										"{{id}}"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "delete project setting",
					"item": [
						{
							"name": "delete project setting by admin",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(`Status code is 204`, function () {",
											"    pm.response.to.have.status(204)",
											"    const response = pm.response.text()",
											"    pm.expect(response).to.eq('')",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{admin_token}}"
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"url": {
									"raw": "{{URL}}/projects/{{project_id}}/settings/{{id}}",
									"host": [
										"{{URL}}"
									],
									"path": [
										"projects",
										"{{project_id}}",
										"settings",
										"{{id}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "delete project setting by m2m",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(`Status code is 204`, function () {",
											"    pm.response.to.have.status(204)",
											"    const response = pm.response.text()",
											"    pm.expect(response).to.eq('')",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{m2m_token}}"
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"url": {
									"raw": "{{URL}}/projects/{{project_id}}/settings/{{id}}",
									"host": [
										"{{URL}}"
									],
									"path": [
										"projects",
										"{{project_id}}",
										"settings",
										"{{id}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "delete project setting with all kinds of invalid request",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const iterationData = pm.iterationData",
											"const httpCode = iterationData.get('httpCode')",
											"pm.test(`Status code is ${httpCode}`, function () {",
											"    pm.response.to.have.status(httpCode);",
											"    const response = pm.response.json()",
											"    if (response.message) {",
											"        pm.expect(response.message).to.contains(iterationData.get('message'))",
											"    } else {",
											"        pm.expect(response.result.content.message).to.eq(iterationData.get('message'))",
											"    }",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "{{jwtToken}}"
									}
								],
								"url": {
									"raw": "{{URL}}/projects/{{project_id}}/settings/{{id}}",
									"host": [
										"{{URL}}"
									],
									"path": [
										"projects",
										"{{project_id}}",
										"settings",
										"{{id}}"
									]
								}
							},
							"response": []
						}
					]
				}
			]
		},
		{
			"name": "Project Estimation Items",
			"item": [
				{
					"name": "list project estimation itmes by admin",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(`Status code is 200`, function () {",
									"    pm.response.to.have.status(200);",
									"    const response = pm.response.json()",
									"    pm.expect(response.length).to.gte(0)",
									"    const iterationData = pm.iterationData",
									"    const expectedFields = iterationData.get('expectedFields')",
									"    for (let item of response) {",
									"        // make sure the list returns the expected fields",
									"        pm.expect(expectedFields.every(r=> Object.keys(item).indexOf(r) >= 0)).to.eq(true)",
									"        if (iterationData.get('limitedFields')) {",
									"            _.isEqual(iterationData.get('limitedFields'), Object.keys(item))",
									"        }",
									"    }",
									"});"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"value": "application/json"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"type": "text",
								"value": "Bearer {{admin_token}}"
							}
						],
						"url": {
							"raw": "{{URL}}/projects/{{project_id}}/estimations/{{estimation_id}}/items",
							"host": [
								"{{URL}}"
							],
							"path": [
								"projects",
								"{{project_id}}",
								"estimations",
								"{{estimation_id}}",
								"items"
							]
						}
					},
					"response": []
				},
				{
					"name": "list project estimation itmes by m2m",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(`Status code is 200`, function () {",
									"    pm.response.to.have.status(200);",
									"    const response = pm.response.json()",
									"    pm.expect(response.length).to.gte(0)",
									"    const iterationData = pm.iterationData",
									"    const expectedFields = iterationData.get('expectedFields')",
									"    for (let item of response) {",
									"        // make sure the list returns the expected fields",
									"        pm.expect(expectedFields.every(r=> Object.keys(item).indexOf(r) >= 0)).to.eq(true)",
									"        if (iterationData.get('limitedFields')) {",
									"            _.isEqual(iterationData.get('limitedFields'), Object.keys(item))",
									"        }",
									"    }",
									"});"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"value": "application/json"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"type": "text",
								"value": "Bearer {{m2m_token}}"
							}
						],
						"url": {
							"raw": "{{URL}}/projects/{{project_id}}/estimations/{{estimation_id}}/items",
							"host": [
								"{{URL}}"
							],
							"path": [
								"projects",
								"{{project_id}}",
								"estimations",
								"{{estimation_id}}",
								"items"
							]
						}
					},
					"response": []
				},
				{
					"name": "list project estimation items with all kinds of invalid data",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const iterationData = pm.iterationData",
									"const httpCode = iterationData.get('httpCode')",
									"pm.test(`Status code is ${httpCode}`, function () {",
									"    pm.response.to.have.status(httpCode);",
									"    const response = pm.response.json()",
									"    if (response.message) {",
									"        pm.expect(response.message).to.eq(iterationData.get('message'))",
									"    } else {",
									"        pm.expect(response.result.content.message).to.eq(iterationData.get('message'))",
									"    }",
									"});"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"value": "application/json"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"type": "text",
								"value": "Bearer {{admin_token}}"
							}
						],
						"url": {
							"raw": "{{URL}}/projects/{{project_id}}/estimations/{{estimation_id}}/items",
							"host": [
								"{{URL}}"
							],
							"path": [
								"projects",
								"{{project_id}}",
								"estimations",
								"{{estimation_id}}",
								"items"
							]
						}
					},
					"response": []
				},
				{
					"name": "list project estimation items with all kinds of invalid token",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const iterationData = pm.iterationData",
									"const httpCode = iterationData.get('httpCode')",
									"pm.test(`Status code is ${httpCode}`, function () {",
									"    pm.response.to.have.status(httpCode);",
									"    const response = pm.response.json()",
									"    if (response.message) {",
									"        pm.expect(response.message).to.eq(iterationData.get('message'))",
									"    } else {",
									"        pm.expect(response.result.content.message).to.eq(iterationData.get('message'))",
									"    }",
									"});"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"value": "application/json"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"type": "text",
								"value": "{{jwtToken}}"
							}
						],
						"url": {
							"raw": "{{URL}}/projects/{{project_id}}/estimations/{{estimation_id}}/items",
							"host": [
								"{{URL}}"
							],
							"path": [
								"projects",
								"{{project_id}}",
								"estimations",
								"{{estimation_id}}",
								"items"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Phase Product",
			"item": [
				{
					"name": "create project phase product",
					"item": [
						{
							"name": "create project phase product by admin",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const iterationData = pm.iterationData",
											"const httpCode = iterationData.get('httpCode')",
											"pm.test(`Status code is ${httpCode}`, function () {",
											"    pm.response.to.have.status(httpCode);",
											"    const response = pm.response.json()",
											"    const iterationData = pm.iterationData",
											"    const expected = iterationData.get('expected')",
											"    for (let key of Object.keys(expected)) {",
											"        if (_.isString(expected[key]) && expected[key].startsWith('{')) {",
											"            pm.expect(_.isEqual(response[key], pm.environment.get(expected[key].substr(2, expected[key].length - 4)))).to.eq(true)",
											"        } else {",
											"            pm.expect(_.isEqual(response[key], expected[key])).to.eq(true)",
											"        }",
											"    }",
											"    if (iterationData.get('idLabel')) {",
											"        const idLabel = iterationData.get('idLabel')",
											"        pm.environment.set(idLabel, response.id)",
											"    }",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"var inputJSONdata = pm.iterationData.get(\"input\");",
											"pm.variables.set(\"input_body\",JSON.stringify(inputJSONdata));"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{admin_token}}"
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{{input_body}}"
								},
								"url": {
									"raw": "{{URL}}/projects/{{project_id}}/phases/{{phase_id}}/products",
									"host": [
										"{{URL}}"
									],
									"path": [
										"projects",
										"{{project_id}}",
										"phases",
										"{{phase_id}}",
										"products"
									]
								}
							},
							"response": []
						},
						{
							"name": "create project phase product by m2m",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const iterationData = pm.iterationData",
											"const httpCode = iterationData.get('httpCode')",
											"pm.test(`Status code is ${httpCode}`, function () {",
											"    pm.response.to.have.status(httpCode);",
											"    const response = pm.response.json()",
											"    const iterationData = pm.iterationData",
											"    const expected = iterationData.get('expected')",
											"    for (let key of Object.keys(expected)) {",
											"        if (_.isString(expected[key]) && expected[key].startsWith('{')) {",
											"            pm.expect(_.isEqual(response[key], pm.environment.get(expected[key].substr(2, expected[key].length - 4)))).to.eq(true)",
											"        } else {",
											"            pm.expect(_.isEqual(response[key], expected[key])).to.eq(true)",
											"        }",
											"    }",
											"    if (iterationData.get('idLabel')) {",
											"        const idLabel = iterationData.get('idLabel')",
											"        pm.environment.set(idLabel, response.id)",
											"    }",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"var inputJSONdata = pm.iterationData.get(\"input\");",
											"pm.variables.set(\"input_body\",JSON.stringify(inputJSONdata));"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{admin_token}}"
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{{input_body}}"
								},
								"url": {
									"raw": "{{URL}}/projects/{{project_id}}/phases/{{phase_id}}/products",
									"host": [
										"{{URL}}"
									],
									"path": [
										"projects",
										"{{project_id}}",
										"phases",
										"{{phase_id}}",
										"products"
									]
								}
							},
							"response": []
						},
						{
							"name": "create project phase product by copilot",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const iterationData = pm.iterationData",
											"const httpCode = iterationData.get('httpCode')",
											"pm.test(`Status code is ${httpCode}`, function () {",
											"    pm.response.to.have.status(httpCode);",
											"    const response = pm.response.json()",
											"    const iterationData = pm.iterationData",
											"    const expected = iterationData.get('expected')",
											"    for (let key of Object.keys(expected)) {",
											"        if (_.isString(expected[key]) && expected[key].startsWith('{')) {",
											"            pm.expect(_.isEqual(response[key], pm.environment.get(expected[key].substr(2, expected[key].length - 4)))).to.eq(true)",
											"        } else {",
											"            pm.expect(_.isEqual(response[key], expected[key])).to.eq(true)",
											"        }",
											"    }",
											"    if (iterationData.get('idLabel')) {",
											"        const idLabel = iterationData.get('idLabel')",
											"        pm.environment.set(idLabel, response.id)",
											"    }",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"var inputJSONdata = pm.iterationData.get(\"input\");",
											"pm.variables.set(\"input_body\",JSON.stringify(inputJSONdata));"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{admin_token}}"
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{{input_body}}"
								},
								"url": {
									"raw": "{{URL}}/projects/{{project_id}}/phases/{{phase_id}}/products",
									"host": [
										"{{URL}}"
									],
									"path": [
										"projects",
										"{{project_id}}",
										"phases",
										"{{phase_id}}",
										"products"
									]
								}
							},
							"response": []
						},
						{
							"name": "create project phase product with all kinds of invalid request body",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const iterationData = pm.iterationData",
											"const httpCode = iterationData.get('httpCode')",
											"pm.test(`Status code is ${httpCode}`, function () {",
											"    pm.response.to.have.status(httpCode);",
											"    const response = pm.response.json()",
											"    pm.expect(response.message).to.eq(iterationData.get('message'))",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"var inputJSONdata = pm.iterationData.get(\"input\");",
											"pm.variables.set(\"input_body\",JSON.stringify(inputJSONdata));"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{admin_token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{{input_body}}"
								},
								"url": {
									"raw": "{{URL}}/projects/{{project_id}}/phases/{{phase_id}}/products",
									"host": [
										"{{URL}}"
									],
									"path": [
										"projects",
										"{{project_id}}",
										"phases",
										"{{phase_id}}",
										"products"
									]
								}
							},
							"response": []
						},
						{
							"name": "create project phase product with all kinds of invalid token",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const iterationData = pm.iterationData",
											"const httpCode = iterationData.get('httpCode')",
											"pm.test(`Status code is ${httpCode}`, function () {",
											"    pm.response.to.have.status(httpCode);",
											"    const response = pm.response.json()",
											"    if (response.message) {",
											"        pm.expect(response.message).to.eq(iterationData.get('message'))",
											"    } else {",
											"        pm.expect(response.result.content.message).to.eq(iterationData.get('message'))",
											"    }",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "{{jwtToken}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"name\": \"POSTMANE2E-Project-Phase-by-admin-with-description\",\n\t\"type\": \"active\"\n}"
								},
								"url": {
									"raw": "{{URL}}/projects/{{project_id}}/phases/{{phase_id}}/products",
									"host": [
										"{{URL}}"
									],
									"path": [
										"projects",
										"{{project_id}}",
										"phases",
										"{{phase_id}}",
										"products"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "list project phase products",
					"item": [
						{
							"name": "list project phase products by admin",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(`Status code is 200`, function () {",
											"    pm.response.to.have.status(200);",
											"    const response = pm.response.json()",
											"    pm.expect(response.length).to.gt(0)",
											"    const iterationData = pm.iterationData",
											"    const expectedFields = iterationData.get('expectedFields')",
											"    for (let item of response) {",
											"        // make sure the list returns the expected fields",
											"        pm.expect(expectedFields.every(r=> Object.keys(item).indexOf(r) >= 0)).to.eq(true)",
											"        if (iterationData.get('limitedFields')) {",
											"            _.isEqual(iterationData.get('limitedFields'), Object.keys(item))",
											"        }",
											"    }",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"value": "Bearer {{admin_token}}",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{URL}}/projects/{{project_id}}/phases/{{phase_id}}/products",
									"host": [
										"{{URL}}"
									],
									"path": [
										"projects",
										"{{project_id}}",
										"phases",
										"{{phase_id}}",
										"products"
									]
								}
							},
							"response": []
						},
						{
							"name": "list project phase products by m2m",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(`Status code is 200`, function () {",
											"    pm.response.to.have.status(200);",
											"    const response = pm.response.json()",
											"    pm.expect(response.length).to.gt(0)",
											"    const iterationData = pm.iterationData",
											"    const expectedFields = iterationData.get('expectedFields')",
											"    for (let item of response) {",
											"        // make sure the list returns the expected fields",
											"        pm.expect(expectedFields.every(r=> Object.keys(item).indexOf(r) >= 0)).to.eq(true)",
											"        if (iterationData.get('limitedFields')) {",
											"            _.isEqual(iterationData.get('limitedFields'), Object.keys(item))",
											"        }",
											"    }",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{m2m_token}}"
									}
								],
								"url": {
									"raw": "{{URL}}/projects/{{project_id}}/phases/{{phase_id}}/products",
									"host": [
										"{{URL}}"
									],
									"path": [
										"projects",
										"{{project_id}}",
										"phases",
										"{{phase_id}}",
										"products"
									]
								}
							},
							"response": []
						},
						{
							"name": "list project phase products by user",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(`Status code is 200`, function () {",
											"    pm.response.to.have.status(200);",
											"    const response = pm.response.json()",
											"    pm.expect(response.length).to.gt(0)",
											"    const iterationData = pm.iterationData",
											"    const expectedFields = iterationData.get('expectedFields')",
											"    for (let item of response) {",
											"        // make sure the list returns the expected fields",
											"        pm.expect(expectedFields.every(r=> Object.keys(item).indexOf(r) >= 0)).to.eq(true)",
											"        if (iterationData.get('limitedFields')) {",
											"            _.isEqual(iterationData.get('limitedFields'), Object.keys(item))",
											"        }",
											"    }",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{user_token}}"
									}
								],
								"url": {
									"raw": "{{URL}}/projects/{{project_id}}/phases/{{phase_id}}/products",
									"host": [
										"{{URL}}"
									],
									"path": [
										"projects",
										"{{project_id}}",
										"phases",
										"{{phase_id}}",
										"products"
									]
								}
							},
							"response": []
						},
						{
							"name": "list project phase products with all kinds of invalid data",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const iterationData = pm.iterationData",
											"const httpCode = iterationData.get('httpCode')",
											"pm.test(`Status code is ${httpCode}`, function () {",
											"    pm.response.to.have.status(httpCode);",
											"    const response = pm.response.json()",
											"    if (response.message) {",
											"        pm.expect(response.message).to.eq(iterationData.get('message'))",
											"    } else {",
											"        pm.expect(response.result.content.message).to.eq(iterationData.get('message'))",
											"    }",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{admin_token}}"
									}
								],
								"url": {
									"raw": "{{URL}}/projects/{{project_id}}/phases/{{phase_id}}/products",
									"host": [
										"{{URL}}"
									],
									"path": [
										"projects",
										"{{project_id}}",
										"phases",
										"{{phase_id}}",
										"products"
									]
								}
							},
							"response": []
						},
						{
							"name": "list project phase products with all kinds of invalid token",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const iterationData = pm.iterationData",
											"const httpCode = iterationData.get('httpCode')",
											"pm.test(`Status code is ${httpCode}`, function () {",
											"    pm.response.to.have.status(httpCode);",
											"    const response = pm.response.json()",
											"    if (response.message) {",
											"        pm.expect(response.message).to.eq(iterationData.get('message'))",
											"    } else {",
											"        pm.expect(response.result.content.message).to.eq(iterationData.get('message'))",
											"    }",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "{{jwtToken}}"
									}
								],
								"url": {
									"raw": "{{URL}}/projects/{{project_id}}/phases/{{phase_id}}/products",
									"host": [
										"{{URL}}"
									],
									"path": [
										"projects",
										"{{project_id}}",
										"phases",
										"{{phase_id}}",
										"products"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "get project phase product",
					"item": [
						{
							"name": "get project phase product by admin",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const iterationData = pm.iterationData",
											"const httpCode = iterationData.get('httpCode')",
											"pm.test(`Status code is ${httpCode}`, function () {",
											"    pm.response.to.have.status(httpCode);",
											"    if(httpCode === 200){",
											"        const response = pm.response.json()",
											"        const iterationData = pm.iterationData",
											"        const expected = iterationData.get('expected')",
											"        for (let key of Object.keys(expected)) {",
											"            if (_.isString(expected[key]) && expected[key].startsWith('{')) {",
											"                pm.expect(_.isEqual(response[key], pm.environment.get(expected[key].substr(2, expected[key].length - 4)))).to.eq(true)",
											"            } else {",
											"                pm.expect(_.isEqual(response[key], expected[key])).to.eq(true)",
											"            }",
											"        }",
											"    }",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{admin_token}}"
									}
								],
								"url": {
									"raw": "{{URL}}/projects/{{project_id}}/phases/{{phase_id}}/products/{{id}}",
									"host": [
										"{{URL}}"
									],
									"path": [
										"projects",
										"{{project_id}}",
										"phases",
										"{{phase_id}}",
										"products",
										"{{id}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "get project phase product by m2m",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const iterationData = pm.iterationData",
											"const httpCode = iterationData.get('httpCode')",
											"pm.test(`Status code is ${httpCode}`, function () {",
											"    pm.response.to.have.status(httpCode);",
											"    if(httpCode === 200){",
											"        const response = pm.response.json()",
											"        const iterationData = pm.iterationData",
											"        const expected = iterationData.get('expected')",
											"        for (let key of Object.keys(expected)) {",
											"            if (_.isString(expected[key]) && expected[key].startsWith('{')) {",
											"                pm.expect(_.isEqual(response[key], pm.environment.get(expected[key].substr(2, expected[key].length - 4)))).to.eq(true)",
											"            } else {",
											"                pm.expect(_.isEqual(response[key], expected[key])).to.eq(true)",
											"            }",
											"        }",
											"    }",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{m2m_token}}"
									}
								],
								"url": {
									"raw": "{{URL}}/projects/{{project_id}}/phases/{{phase_id}}/products/{{id}}",
									"host": [
										"{{URL}}"
									],
									"path": [
										"projects",
										"{{project_id}}",
										"phases",
										"{{phase_id}}",
										"products",
										"{{id}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "get project phase product by user",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const iterationData = pm.iterationData",
											"const httpCode = iterationData.get('httpCode')",
											"pm.test(`Status code is ${httpCode}`, function () {",
											"    pm.response.to.have.status(httpCode);",
											"    if(httpCode === 200){",
											"        const response = pm.response.json()",
											"        const iterationData = pm.iterationData",
											"        const expected = iterationData.get('expected')",
											"        for (let key of Object.keys(expected)) {",
											"            if (_.isString(expected[key]) && expected[key].startsWith('{')) {",
											"                pm.expect(_.isEqual(response[key], pm.environment.get(expected[key].substr(2, expected[key].length - 4)))).to.eq(true)",
											"            } else {",
											"                pm.expect(_.isEqual(response[key], expected[key])).to.eq(true)",
											"            }",
											"        }",
											"    }",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{user_token}}"
									}
								],
								"url": {
									"raw": "{{URL}}/projects/{{project_id}}/phases/{{phase_id}}/products/{{id}}",
									"host": [
										"{{URL}}"
									],
									"path": [
										"projects",
										"{{project_id}}",
										"phases",
										"{{phase_id}}",
										"products",
										"{{id}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "get project phase product with invalid requests",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const iterationData = pm.iterationData",
											"const httpCode = iterationData.get('httpCode')",
											"pm.test(`Status code is ${httpCode}`, function () {",
											"    pm.response.to.have.status(httpCode);",
											"    const response = pm.response.json()",
											"    pm.expect(response.message).to.eq(iterationData.get('message'))",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{admin_token}}"
									}
								],
								"url": {
									"raw": "{{URL}}/projects/{{project_id}}/phases/{{phase_id}}/products/{{id}}",
									"host": [
										"{{URL}}"
									],
									"path": [
										"projects",
										"{{project_id}}",
										"phases",
										"{{phase_id}}",
										"products",
										"{{id}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "get project phase product with all kinds of invalid token",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const iterationData = pm.iterationData",
											"const httpCode = iterationData.get('httpCode')",
											"pm.test(`Status code is ${httpCode}`, function () {",
											"    pm.response.to.have.status(httpCode);",
											"    const response = pm.response.json()",
											"    if (response.message) {",
											"        pm.expect(response.message).to.eq(iterationData.get('message'))",
											"    } else {",
											"        pm.expect(response.result.content.message).to.eq(iterationData.get('message'))",
											"    }",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "{{jwtToken}}"
									}
								],
								"url": {
									"raw": "{{URL}}/projects/{{project_id}}/phases/{{phase_id}}/products/{{id}}",
									"host": [
										"{{URL}}"
									],
									"path": [
										"projects",
										"{{project_id}}",
										"phases",
										"{{phase_id}}",
										"products",
										"{{id}}"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "patch project phase product",
					"item": [
						{
							"name": "patch project phase product by admin",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const iterationData = pm.iterationData",
											"const httpCode = iterationData.get('httpCode')",
											"pm.test(`Status code is ${httpCode}`, function () {",
											"    pm.response.to.have.status(httpCode);",
											"    const response = pm.response.json()",
											"    const iterationData = pm.iterationData",
											"    const expected = iterationData.get('expected')",
											"    for (let key of Object.keys(expected)) {",
											"        if (_.isString(expected[key]) && expected[key].startsWith('{')) {",
											"            pm.expect(_.isEqual(response[key], pm.environment.get(expected[key].substr(2, expected[key].length - 4)))).to.eq(true)",
											"        } else {",
											"            pm.expect(_.isEqual(response[key], expected[key])).to.eq(true)",
											"        }",
											"    }",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"var inputJSONdata = pm.iterationData.get(\"input\");",
											"pm.variables.set(\"input_body\",JSON.stringify(inputJSONdata));"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PATCH",
								"header": [
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{admin_token}}"
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{{input_body}}"
								},
								"url": {
									"raw": "{{URL}}/projects/{{project_id}}/phases/{{phase_id}}/products/{{id}}",
									"host": [
										"{{URL}}"
									],
									"path": [
										"projects",
										"{{project_id}}",
										"phases",
										"{{phase_id}}",
										"products",
										"{{id}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "patch project phase product with all kinds of invalid request body",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const iterationData = pm.iterationData",
											"const httpCode = iterationData.get('httpCode')",
											"pm.test(`Status code is ${httpCode}`, function () {",
											"    pm.response.to.have.status(httpCode);",
											"    const response = pm.response.json()",
											"    pm.expect(response.message).to.includes(iterationData.get('message'))",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"var inputJSONdata = pm.iterationData.get(\"input\");",
											"pm.variables.set(\"input_body\",JSON.stringify(inputJSONdata));"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PATCH",
								"header": [
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{admin_token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{{input_body}}"
								},
								"url": {
									"raw": "{{URL}}/projects/{{project_id}}/phases/{{phase_id}}/products/{{id}}",
									"host": [
										"{{URL}}"
									],
									"path": [
										"projects",
										"{{project_id}}",
										"phases",
										"{{phase_id}}",
										"products",
										"{{id}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "patch project phase product with all kinds of invalid token",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const iterationData = pm.iterationData",
											"const httpCode = iterationData.get('httpCode')",
											"pm.test(`Status code is ${httpCode}`, function () {",
											"    pm.response.to.have.status(httpCode);",
											"    const response = pm.response.json()",
											"    if (response.message) {",
											"        pm.expect(response.message).to.eq(iterationData.get('message'))",
											"    } else {",
											"        pm.expect(response.result.content.message).to.eq(iterationData.get('message'))",
											"    }",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PATCH",
								"header": [
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "{{jwtToken}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"details\": [\"check check\"]\n}"
								},
								"url": {
									"raw": "{{URL}}/projects/{{project_id}}/phases/{{phase_id}}/products/{{id}}",
									"host": [
										"{{URL}}"
									],
									"path": [
										"projects",
										"{{project_id}}",
										"phases",
										"{{phase_id}}",
										"products",
										"{{id}}"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "delete project phase product",
					"item": [
						{
							"name": "delete project phase product by admin",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(`Status code is 204`, function () {",
											"    pm.response.to.have.status(204)",
											"    const response = pm.response.text()",
											"    pm.expect(response).to.eq('')",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{admin_token}}"
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"url": {
									"raw": "{{URL}}/projects/{{project_id}}/phases/{{phase_id}}/products/{{id}}",
									"host": [
										"{{URL}}"
									],
									"path": [
										"projects",
										"{{project_id}}",
										"phases",
										"{{phase_id}}",
										"products",
										"{{id}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "delete project phase product with all kinds of invalid request",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const iterationData = pm.iterationData",
											"const httpCode = iterationData.get('httpCode')",
											"pm.test(`Status code is ${httpCode}`, function () {",
											"    pm.response.to.have.status(httpCode);",
											"    const response = pm.response.json()",
											"    if (response.message) {",
											"        pm.expect(response.message).to.contains(iterationData.get('message'))",
											"    } else {",
											"        pm.expect(response.result.content.message).to.eq(iterationData.get('message'))",
											"    }",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "{{jwtToken}}"
									}
								],
								"url": {
									"raw": "{{URL}}/projects/{{project_id}}/phases/{{phase_id}}/products/{{id}}",
									"host": [
										"{{URL}}"
									],
									"path": [
										"projects",
										"{{project_id}}",
										"phases",
										"{{phase_id}}",
										"products",
										"{{id}}"
									]
								}
							},
							"response": []
						}
					]
				}
			]
		},
		{
			"name": "metadata",
			"item": [
				{
					"name": "list project metadata by admin",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(`Status code is 200`, function () {",
									"    pm.response.to.have.status(200);",
									"    const response = pm.response.json()",
									"    const iterationData = pm.iterationData",
									"    const expectedFields = iterationData.get('expectedFields')",
									"    // make sure the list returns the expected fields",
									"    pm.expect(expectedFields.every(r=> Object.keys(response).indexOf(r) >= 0)).to.eq(true)",
									"});"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"value": "application/json"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"type": "text",
								"value": "Bearer {{admin_token}}"
							}
						],
						"url": {
							"raw": "{{URL}}/projects/metadata",
							"host": [
								"{{URL}}"
							],
							"path": [
								"projects",
								"metadata"
							]
						}
					},
					"response": []
				},
				{
					"name": "list project metadata by m2m",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(`Status code is 200`, function () {",
									"    pm.response.to.have.status(200);",
									"    const response = pm.response.json()",
									"    const iterationData = pm.iterationData",
									"    const expectedFields = iterationData.get('expectedFields')",
									"    // make sure the list returns the expected fields",
									"    pm.expect(expectedFields.every(r=> Object.keys(response).indexOf(r) >= 0)).to.eq(true)",
									"});"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"value": "application/json"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"type": "text",
								"value": "Bearer {{m2m_token}}"
							}
						],
						"url": {
							"raw": "{{URL}}/projects/metadata",
							"host": [
								"{{URL}}"
							],
							"path": [
								"projects",
								"metadata"
							]
						}
					},
					"response": []
				},
				{
					"name": "list project metadata by copilot",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(`Status code is 200`, function () {",
									"    pm.response.to.have.status(200);",
									"    const response = pm.response.json()",
									"    const iterationData = pm.iterationData",
									"    const expectedFields = iterationData.get('expectedFields')",
									"    // make sure the list returns the expected fields",
									"    pm.expect(expectedFields.every(r=> Object.keys(response).indexOf(r) >= 0)).to.eq(true)",
									"});"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"value": "application/json"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"type": "text",
								"value": "Bearer {{copilot_token}}"
							}
						],
						"url": {
							"raw": "{{URL}}/projects/metadata",
							"host": [
								"{{URL}}"
							],
							"path": [
								"projects",
								"metadata"
							]
						}
					},
					"response": []
				},
				{
					"name": "list project metadata by user",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(`Status code is 200`, function () {",
									"    pm.response.to.have.status(200);",
									"    const response = pm.response.json()",
									"    const iterationData = pm.iterationData",
									"    const expectedFields = iterationData.get('expectedFields')",
									"    // make sure the list returns the expected fields",
									"    pm.expect(expectedFields.every(r=> Object.keys(response).indexOf(r) >= 0)).to.eq(true)",
									"});"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"value": "application/json"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"type": "text",
								"value": "Bearer {{user_token}}"
							}
						],
						"url": {
							"raw": "{{URL}}/projects/metadata",
							"host": [
								"{{URL}}"
							],
							"path": [
								"projects",
								"metadata"
							]
						}
					},
					"response": []
				},
				{
					"name": "list project metadata with all kinds of invalid token",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const iterationData = pm.iterationData",
									"const httpCode = iterationData.get('httpCode')",
									"pm.test(`Status code is ${httpCode}`, function () {",
									"    pm.response.to.have.status(httpCode);",
									"    const response = pm.response.json()",
									"    if (response.message) {",
									"        pm.expect(response.message).to.eq(iterationData.get('message'))",
									"    } else {",
									"        pm.expect(response.result.content.message).to.eq(iterationData.get('message'))",
									"    }",
									"});"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"value": "application/json"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"type": "text",
								"value": "{{jwtToken}}"
							}
						],
						"url": {
							"raw": "{{URL}}/projects/metadata",
							"host": [
								"{{URL}}"
							],
							"path": [
								"projects",
								"metadata"
							]
						}
					},
					"response": []
				}
			]
		}
	]
}